================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\config\asgi.py
================================================================================
0001: """
0002: ASGI config for config project.
0003: 
0004: It exposes the ASGI callable as a module-level variable named ``application``.
0005: 
0006: For more information on this file, see
0007: https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
0008: """
0009: 
0010: import os
0011: 
0012: from django.core.asgi import get_asgi_application
0013: 
0014: os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
0015: 
0016: application = get_asgi_application()

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\config\celery.py
================================================================================
0001: import os
0002: 
0003: from celery import Celery
0004: 
0005: # РЈСЃС‚Р°РЅР°РІР»РёРІР°РµРј РЅР°СЃС‚СЂРѕР№РєРё Django РґР»СЏ Celery
0006: os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
0007: 
0008: app = Celery("config")
0009: 
0010: # РСЃРїРѕР»СЊР·СѓРµРј РєРѕРЅС„РёРі РёР· settings.py
0011: app.config_from_object("django.conf:settings", namespace="CELERY")
0012: 
0013: # РђРІС‚РѕРїРѕРёСЃРє Р·Р°РґР°С‡ РІРѕ РІСЃРµС… РїСЂРёР»РѕР¶РµРЅРёСЏС…
0014: app.autodiscover_tasks()
0015: 
0016: 
0017: # РџСЂРѕСЃС‚Р°СЏ Р·Р°РґР°С‡Р° РґР»СЏ С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ
0018: @app.task(bind=True)
0019: def debug_task(self):
0020:     return f"Request: {self.request.id}"

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\config\settings.py
================================================================================
0001: import os
0002: from datetime import timedelta
0003: from pathlib import Path
0004: 
0005: from dotenv import load_dotenv
0006: 
0007: load_dotenv(override=True)
0008: 
0009: # Build paths inside the project like this: BASE_DIR / 'subdir'.
0010: BASE_DIR = Path(__file__).resolve().parent.parent
0011: 
0012: # Quick-start development settings - unsuitable for production
0013: # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
0014: 
0015: # SECURITY WARNING: keep the secret key used in production secret!
0016: SECRET_KEY = os.getenv("SECRET_KEY")
0017: 
0018: # SECURITY WARNING: don't run with debug turned on in production!
0019: DEBUG = True if os.getenv("DEBUG") == "True" else False
0020: 
0021: ALLOWED_HOSTS = []
0022: 
0023: # Application definition
0024: 
0025: INSTALLED_APPS = [
0026:     "django.contrib.admin",
0027:     "django.contrib.auth",
0028:     "django.contrib.contenttypes",
0029:     "django.contrib.sessions",
0030:     "django.contrib.messages",
0031:     "django.contrib.staticfiles",
0032:     "django_filters",
0033:     "rest_framework",
0034:     "rest_framework_simplejwt",
0035:     "django_extensions",
0036:     "drf_yasg",
0037:     "django_celery_beat",
0038:     "django_celery_results",
0039:     "user",
0040:     "habits",
0041:     "corsheaders",
0042: ]
0043: 
0044: MIDDLEWARE = [
0045:     "corsheaders.middleware.CorsMiddleware",
0046:     "django.middleware.security.SecurityMiddleware",
0047:     "django.middleware.security.SecurityMiddleware",
0048:     "django.contrib.sessions.middleware.SessionMiddleware",
0049:     "django.middleware.common.CommonMiddleware",
0050:     "django.middleware.csrf.CsrfViewMiddleware",
0051:     "django.contrib.auth.middleware.AuthenticationMiddleware",
0052:     "django.contrib.messages.middleware.MessageMiddleware",
0053:     "django.middleware.clickjacking.XFrameOptionsMiddleware",
0054: ]
0055: 
0056: ROOT_URLCONF = "config.urls"
0057: 
0058: TEMPLATES = [
0059:     {
0060:         "BACKEND": "django.template.backends.django.DjangoTemplates",
0061:         "DIRS": [BASE_DIR / "templates"],
0062:         "APP_DIRS": True,
0063:         "OPTIONS": {
0064:             "context_processors": [
0065:                 "django.template.context_processors.request",
0066:                 "django.contrib.auth.context_processors.auth",
0067:                 "django.contrib.messages.context_processors.messages",
0068:             ],
0069:         },
0070:     },
0071: ]
0072: 
0073: WSGI_APPLICATION = "config.wsgi.application"
0074: 
0075: # Database
0076: # https://docs.djangoproject.com/en/5.2/ref/settings/#databases
0077: 
0078: DATABASES = {
0079:     "default": {
0080:         "ENGINE": "django.db.backends.postgresql_psycopg2",
0081:         "NAME": os.getenv("NAME"),
0082:         "USER": os.getenv("USER"),
0083:         "PASSWORD": os.getenv("DB_PASSWORD"),
0084:         "HOST": os.getenv("HOST"),
0085:         "PORT": os.getenv("PORT"),
0086:     }
0087: }
0088: 
0089: # Password validation
0090: # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
0091: 
0092: AUTH_PASSWORD_VALIDATORS = [
0093:     {
0094:         "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
0095:     },
0096:     {
0097:         "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
0098:     },
0099:     {
0100:         "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
0101:     },
0102:     {
0103:         "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
0104:     },
0105: ]
0106: 
0107: REST_FRAMEWORK = {
0108:     "DEFAULT_FILTER_BACKENDS": [
0109:         "django_filters.rest_framework.DjangoFilterBackend",
0110:         "rest_framework.filters.OrderingFilter",
0111:     ],
0112:     "DEFAULT_AUTHENTICATION_CLASSES": [
0113:         "rest_framework_simplejwt.authentication.JWTAuthentication",
0114:         "rest_framework.authentication.SessionAuthentication",
0115:         "rest_framework.authentication.TokenAuthentication",
0116:     ],
0117:     "DEFAULT_PERMISSION_CLASSES": [
0118:         "rest_framework.permissions.IsAuthenticated",
0119:     ],
0120:     "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
0121:     "PAGE_SIZE": 5,
0122: }
0123: 
0124: # Internationalization
0125: # https://docs.djangoproject.com/en/5.2/topics/i18n/
0126: 
0127: LANGUAGE_CODE = "en-us"
0128: 
0129: USE_I18N = True
0130: 
0131: USE_TZ = True
0132: 
0133: TIME_ZONE = "Europe/Moscow"
0134: 
0135: # Static files (CSS, JavaScript, Images)
0136: # https://docs.djangoproject.com/en/5.2/howto/static-files/
0137: 
0138: STATIC_URL = "static/"
0139: STATICFILES_DIRS = (BASE_DIR / "static",)
0140: STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"
0141: STATIC_ROOT = BASE_DIR / "staticfiles"
0142: 
0143: # Default primary key field type
0144: # https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
0145: 
0146: DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
0147: 
0148: DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
0149: 
0150: MEDIA_URL = "media/"
0151: 
0152: MEDIA_ROOT = BASE_DIR / "media"
0153: 
0154: AUTH_USER_MODEL = "user.User"
0155: 
0156: LOGIN_REDIRECT_URL = "home"
0157: LOGOUT_REDIRECT_URL = "home"
0158: LOGIN_URL = "user:login"
0159: 
0160: EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
0161: EMAIL_HOST = os.getenv("EMAIL_HOST")
0162: EMAIL_PORT = os.getenv("EMAIL_PORT")
0163: EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
0164: EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
0165: EMAIL_USE_TLS = False
0166: EMAIL_USE_SSL = True
0167: DEFAULT_FROM_EMAIL = os.getenv("EMAIL_HOST_USER")
0168: SERVER_EMAIL = os.getenv("EMAIL_HOST_USER")
0169: 
0170: CACHES = {
0171:     "default": {
0172:         "BACKEND": "django_redis.cache.RedisCache",
0173:         "LOCATION": "redis://127.0.0.1:6379/2",
0174:         "OPTIONS": {
0175:             "CLIENT_CLASS": "django_redis.client.DefaultClient",
0176:         },
0177:         "KEY_PREFIX": "mail_service_",
0178:         "TIMEOUT": 60 * 15,  # 15 РјРёРЅСѓС‚
0179:     }
0180: }
0181: 
0182: SIMPLE_JWT = {
0183:     "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60 * 2),
0184:     "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
0185: }
0186: 
0187: CELERY_BROKER_URL = "redis://localhost:6379/0"
0188: CELERY_RESULT_BACKEND = "redis://localhost:6379/0"
0189: CELERY_ACCEPT_CONTENT = ["json"]
0190: CELERY_TASK_SERIALIZER = "json"
0191: CELERY_RESULT_SERIALIZER = "json"
0192: CELERY_TIMEZONE = "Europe/Moscow"
0193: 
0194: CELERY_TASK_ALWAYS_EAGER = True
0195: CELERY_TASK_EAGER_PROPAGATES = True
0196: 
0197: CELERY_BEAT_SCHEDULE = {
0198:     "check-habit-reminders-every-minute": {
0199:         "task": "habits.tasks.check_and_send_habit_reminders",
0200:         "schedule": 60.0,  # РљР°Р¶РґСѓСЋ РјРёРЅСѓС‚Сѓ (60 СЃРµРєСѓРЅРґ)
0201:     },
0202:     "debug-task-every-5-minutes": {
0203:         "task": "habits.tasks.debug_task",
0204:         "schedule": 300.0,  # РљР°Р¶РґС‹Рµ 5 РјРёРЅСѓС‚ РґР»СЏ С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ
0205:     },
0206: }
0207: 
0208: TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
0209: 
0210: CORS_ALLOW_ALL_ORIGINS = True
0211: CORS_ALLOWED_ORIGINS = [
0212:     "http://localhost:3000",
0213:     "http://127.0.0.1:3000",
0214:     "http://localhost:8080",
0215:     "http://127.0.0.1:8080",
0216: ]
0217: CORS_ALLOW_CREDENTIALS = True
0218: CORS_ALLOW_HEADERS = [
0219:     "accept",
0220:     "accept-encoding",
0221:     "authorization",
0222:     "content-type",
0223:     "dnt",
0224:     "origin",
0225:     "user-agent",
0226:     "x-csrftoken",
0227:     "x-requested-with",
0228: ]
0229: CORS_ALLOW_HEADERS += [
0230:     "access-control-allow-headers",
0231:     "access-control-allow-methods",
0232:     "access-control-allow-origin",
0233: ]
0234: 
0235: SWAGGER_SETTINGS = {
0236:     "SECURITY_DEFINITIONS": {
0237:         "Bearer": {
0238:             "type": "apiKey",
0239:             "name": "Authorization",
0240:             "in": "header",
0241:             "description": "JWT С‚РѕРєРµРЅ РІ С„РѕСЂРјР°С‚Рµ: Bearer <token>",
0242:         }
0243:     },
0244:     "USE_SESSION_AUTH": False,
0245:     "JSON_EDITOR": True,
0246:     "DEFAULT_INFO": "config.urls.schema_view.info",
0247: }
0248: 
0249: REDOC_SETTINGS = {
0250:     "LAZY_RENDERING": False,
0251:     "HIDE_HOSTNAME": False,
0252: }

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\config\urls.py
================================================================================
0001: from django.conf import settings
0002: from django.conf.urls.static import static
0003: from django.contrib import admin
0004: from django.urls import include, path
0005: from django.views.generic import TemplateView
0006: from drf_yasg import openapi
0007: from drf_yasg.views import get_schema_view
0008: from rest_framework import permissions
0009: 
0010: # РќР°СЃС‚СЂРѕР№РєР° СЃС…РµРјС‹ API
0011: schema_view = get_schema_view(
0012:     openapi.Info(
0013:         title="Habit Tracker API",
0014:         default_version="v1",
0015:         description="API РґР»СЏ С‚СЂРµРєРµСЂР° РїРѕР»РµР·РЅС‹С… РїСЂРёРІС‹С‡РµРє",
0016:         terms_of_service="https://www.google.com/policies/terms/",
0017:         contact=openapi.Contact(email="contact@habittracker.local"),
0018:         license=openapi.License(name="BSD License"),
0019:     ),
0020:     public=True,
0021:     permission_classes=(permissions.AllowAny,),
0022: )
0023: 
0024: urlpatterns = [
0025:     path("admin/", admin.site.urls),
0026:     path("", TemplateView.as_view(template_name="home.html"), name="home"),
0027:     path("user/", include("user.urls", namespace="user")),
0028:     path("habit_tracker/", include("habits.urls", namespace="habits")),
0029:     path("swagger.json", schema_view.without_ui(cache_timeout=0), name="schema-json"),
0030:     path("swagger.yaml", schema_view.without_ui(cache_timeout=0), name="schema-yaml"),
0031:     path("swagger/", schema_view.with_ui("swagger", cache_timeout=0), name="schema-swagger-ui"),
0032:     path("redoc/", schema_view.with_ui("redoc", cache_timeout=0), name="schema-redoc"),
0033: ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\config\wsgi.py
================================================================================
0001: """
0002: WSGI config for config project.
0003: 
0004: It exposes the WSGI callable as a module-level variable named ``application``.
0005: 
0006: For more information on this file, see
0007: https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
0008: """
0009: 
0010: import os
0011: 
0012: from django.core.wsgi import get_wsgi_application
0013: 
0014: os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
0015: 
0016: application = get_wsgi_application()

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\config\__init__.py
================================================================================
0001: from .celery import app as celery_app
0002: 
0003: __all__ = ("celery_app",)

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\management\commands\clear_habits.py
================================================================================
0001: from django.core.management.base import BaseCommand
0002: 
0003: from habits.models import Habit
0004: 
0005: 
0006: class Command(BaseCommand):
0007:     help = "РћС‡РёСЃС‚РєР° РІСЃРµС… РїСЂРёРІС‹С‡РµРє РёР· Р±Р°Р·С‹ РґР°РЅРЅС‹С…"
0008: 
0009:     def handle(self, *args, **options):
0010:         count, _ = Habit.objects.all().delete()
0011:         self.stdout.write(self.style.SUCCESS(f"РЈРґР°Р»РµРЅРѕ {count} РїСЂРёРІС‹С‡РµРє"))

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\management\commands\debug_notifications.py
================================================================================
0001: import logging
0002: 
0003: import requests
0004: from django.conf import settings
0005: from django.contrib.auth import get_user_model
0006: from django.core.management.base import BaseCommand
0007: 
0008: logger = logging.getLogger(__name__)
0009: User = get_user_model()
0010: 
0011: 
0012: class Command(BaseCommand):
0013:     help = "РџРѕР»РЅР°СЏ РґРёР°РіРЅРѕСЃС‚РёРєР° СЃРёСЃС‚РµРјС‹ СѓРІРµРґРѕРјР»РµРЅРёР№"
0014: 
0015:     def handle(self, *args, **options):
0016:         self.stdout.write("рџ”Ќ РќР°С‡РёРЅР°РµРј РґРёР°РіРЅРѕСЃС‚РёРєСѓ СЃРёСЃС‚РµРјС‹ СѓРІРµРґРѕРјР»РµРЅРёР№...")
0017: 
0018:         # РЁР°Рі 1: РџСЂРѕРІРµСЂРєР° РЅР°СЃС‚СЂРѕРµРє
0019:         self.stdout.write("\n1. рџ”§ РџСЂРѕРІРµСЂРєР° РЅР°СЃС‚СЂРѕРµРє...")
0020:         if not settings.TELEGRAM_BOT_TOKEN:
0021:             self.stdout.write(self.style.ERROR("вќЊ TELEGRAM_BOT_TOKEN РЅРµ РЅР°СЃС‚СЂРѕРµРЅ!"))
0022:             return
0023:         self.stdout.write(self.style.SUCCESS("вњ… TELEGRAM_BOT_TOKEN РЅР°СЃС‚СЂРѕРµРЅ"))
0024: 
0025:         # РЁР°Рі 2: РџСЂРѕРІРµСЂРєР° РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№
0026:         self.stdout.write("\n2. рџ‘Ґ РџСЂРѕРІРµСЂРєР° РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№...")
0027:         users_with_telegram = User.objects.filter(telegram_chat_id__isnull=False)
0028:         self.stdout.write(f"РќР°Р№РґРµРЅРѕ РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№ СЃ Telegram: {users_with_telegram.count()}")
0029: 
0030:         for user in users_with_telegram:
0031:             self.stdout.write(
0032:                 f"   рџ‘¤ {user.username}: chat_id={user.telegram_chat_id}, notifications={user.telegram_notifications}"
0033:             )
0034: 
0035:         if not users_with_telegram.exists():
0036:             self.stdout.write(self.style.ERROR("вќЊ РќРµС‚ РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№ СЃ РїСЂРёРІСЏР·Р°РЅРЅС‹Рј Telegram!"))
0037:             return
0038: 
0039:         # РЁР°Рі 3: РџСЂРѕРІРµСЂРєР° Telegram API
0040:         self.stdout.write("\n3. рџ“Ў РџСЂРѕРІРµСЂРєР° Telegram API...")
0041:         try:
0042:             url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/getMe"
0043:             response = requests.get(url, timeout=10)
0044:             if response.status_code == 200:
0045:                 bot_info = response.json()
0046:                 self.stdout.write(
0047:                     self.style.SUCCESS(f'вњ… Telegram API СЂР°Р±РѕС‚Р°РµС‚. Р‘РѕС‚: {bot_info["result"]["username"]}')
0048:                 )
0049:             else:
0050:                 self.stdout.write(self.style.ERROR(f"вќЊ РћС€РёР±РєР° Telegram API: {response.status_code}"))
0051:                 return
0052:         except Exception as e:
0053:             self.stdout.write(self.style.ERROR(f"вќЊ РћС€РёР±РєР° РїРѕРґРєР»СЋС‡РµРЅРёСЏ Рє Telegram API: {e}"))
0054:             return
0055: 
0056:         # РЁР°Рі 4: РџСЂРѕР±РЅР°СЏ РѕС‚РїСЂР°РІРєР° СЃРѕРѕР±С‰РµРЅРёСЏ
0057:         self.stdout.write("\n4. рџ“Ё РўРµСЃС‚РѕРІР°СЏ РѕС‚РїСЂР°РІРєР° СЃРѕРѕР±С‰РµРЅРёСЏ...")
0058:         user = users_with_telegram.first()
0059: 
0060:         url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
0061:         payload = {
0062:             "chat_id": user.telegram_chat_id,
0063:             "text": "рџ§Є РўРµСЃС‚РѕРІРѕРµ СЃРѕРѕР±С‰РµРЅРёРµ РёР· РґРёР°РіРЅРѕСЃС‚РёРєРё",
0064:             "parse_mode": "HTML",
0065:         }
0066: 
0067:         try:
0068:             response = requests.post(url, json=payload, timeout=10)
0069:             if response.status_code == 200:
0070:                 self.stdout.write(self.style.SUCCESS("вњ… РЎРѕРѕР±С‰РµРЅРёРµ СѓСЃРїРµС€РЅРѕ РѕС‚РїСЂР°РІР»РµРЅРѕ!"))
0071:                 self.stdout.write("рџ“± РџСЂРѕРІРµСЂСЊС‚Рµ Telegram, РґРѕР»Р¶РЅРѕ РїСЂРёР№С‚Рё СЃРѕРѕР±С‰РµРЅРёРµ")
0072:             else:
0073:                 self.stdout.write(self.style.ERROR(f"вќЊ РћС€РёР±РєР° РѕС‚РїСЂР°РІРєРё: {response.status_code} - {response.text}"))
0074:         except Exception as e:
0075:             self.stdout.write(self.style.ERROR(f"вќЊ РћС€РёР±РєР°: {e}"))
0076: 
0077:         self.stdout.write("\nрџЋЇ Р”РёР°РіРЅРѕСЃС‚РёРєР° Р·Р°РІРµСЂС€РµРЅР°!")

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\management\commands\load_public_habits.py
================================================================================
0001: import random
0002: from datetime import time
0003: 
0004: from django.contrib.auth import get_user_model
0005: from django.core.management.base import BaseCommand
0006: 
0007: from habits.models import Habit
0008: 
0009: User = get_user_model()
0010: 
0011: 
0012: class Command(BaseCommand):
0013:     help = "Р—Р°РіСЂСѓР·РєР° РїСѓР±Р»РёС‡РЅС‹С… РїСЂРёРІС‹С‡РµРє РІ Р±Р°Р·Сѓ РґР°РЅРЅС‹С…"
0014: 
0015:     def handle(self, *args, **options):
0016:         # РЎРѕР·РґР°РµРј РёР»Рё РїРѕР»СѓС‡Р°РµРј РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РґР»СЏ РїСѓР±Р»РёС‡РЅС‹С… РїСЂРёРІС‹С‡РµРє
0017:         user, created = User.objects.get_or_create(
0018:             username="public_habits_bot",
0019:             defaults={"email": "bot@habittracker.com", "is_active": True, "is_verified": True},
0020:         )
0021: 
0022:         if created:
0023:             user.set_password("botpassword123")
0024:             user.save()
0025:             self.stdout.write(self.style.SUCCESS("РЎРѕР·РґР°РЅ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ РґР»СЏ РїСѓР±Р»РёС‡РЅС‹С… РїСЂРёРІС‹С‡РµРє"))
0026: 
0027:         # РћС‡РёС‰Р°РµРј СЃС‚Р°СЂС‹Рµ РїСЂРёРІС‹С‡РєРё СЌС‚РѕРіРѕ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
0028:         Habit.objects.filter(user=user).delete()
0029:         self.stdout.write("РЈРґР°Р»РµРЅС‹ СЃС‚Р°СЂС‹Рµ РїСЂРёРІС‹С‡РєРё Р±РѕС‚Р°")
0030: 
0031:         pleasant_habits = []
0032:         pleasant_data = [
0033:             {
0034:                 "action": "РЎР»СѓС€Р°С‚СЊ Р»СЋР±РёРјСѓСЋ РјСѓР·С‹РєСѓ",
0035:                 "place": "Р”РёРІР°РЅ",
0036:                 "time": time(20, 30),
0037:                 "frequency": 1,
0038:                 "duration": 600,
0039:                 "is_pleasant": True,
0040:             },
0041:             {
0042:                 "action": "РџСЂРёРЅСЏС‚СЊ Р°СЂРѕРјР°С‚РЅСѓСЋ РІР°РЅРЅСѓ",
0043:                 "place": "Р’Р°РЅРЅР°СЏ РєРѕРјРЅР°С‚Р°",
0044:                 "time": time(21, 0),
0045:                 "frequency": 2,
0046:                 "duration": 1800,
0047:                 "is_pleasant": True,
0048:             },
0049:             {
0050:                 "action": "РЎСЉРµСЃС‚СЊ РєСѓСЃРѕС‡РµРє С‚РµРјРЅРѕРіРѕ С€РѕРєРѕР»Р°РґР°",
0051:                 "place": "РљСѓС…РЅСЏ",
0052:                 "time": time(16, 0),
0053:                 "frequency": 1,
0054:                 "duration": 60,
0055:                 "is_pleasant": True,
0056:             },
0057:             {
0058:                 "action": "Р“СѓР»СЏС‚СЊ 30 РјРёРЅСѓС‚ РІ РїР°СЂРєРµ",
0059:                 "place": "РџР°СЂРє",
0060:                 "time": time(18, 30),
0061:                 "frequency": 1,
0062:                 "duration": 1800,
0063:                 "is_pleasant": True,
0064:             },
0065:         ]
0066: 
0067:         for data in pleasant_data:
0068:             habit = Habit.objects.create(user=user, **data, is_public=True)
0069:             pleasant_habits.append(habit)
0070:             self.stdout.write(f"РЎРѕР·РґР°РЅР° РїСЂРёСЏС‚РЅР°СЏ РїСЂРёРІС‹С‡РєР°: {habit.action}")
0071: 
0072:         # РўРµРїРµСЂСЊ СЃРѕР·РґР°РµРј РїРѕР»РµР·РЅС‹Рµ РїСЂРёРІС‹С‡РєРё
0073:         useful_data = [
0074:             {
0075:                 "action": "РџРёС‚СЊ СЃС‚Р°РєР°РЅ РІРѕРґС‹ СѓС‚СЂРѕРј",
0076:                 "place": "РљСѓС…РЅСЏ",
0077:                 "time": time(7, 0),
0078:                 "frequency": 1,
0079:                 "duration": 60,
0080:                 "reward": "Р§Р°С€РєР° РєРѕС„Рµ",
0081:             },
0082:             {
0083:                 "action": "Р§РёС‚Р°С‚СЊ 1 СЃС‚СЂР°РЅРёС†Сѓ РєРЅРёРіРё",
0084:                 "place": "Р”РёРІР°РЅ",
0085:                 "time": time(21, 0),
0086:                 "frequency": 1,
0087:                 "duration": 120,
0088:                 "reward": "РџСЂРѕСЃРјРѕС‚СЂ СЃРµСЂРёР°Р»Р°",
0089:             },
0090:             {
0091:                 "action": "Р”РµР»Р°С‚СЊ СѓС‚СЂРµРЅРЅСЋСЋ Р·Р°СЂСЏРґРєСѓ",
0092:                 "place": "Р“РѕСЃС‚РёРЅР°СЏ",
0093:                 "time": time(7, 30),
0094:                 "frequency": 1,
0095:                 "duration": 120,
0096:                 "reward": "РљРѕРЅС‚СЂР°СЃС‚РЅС‹Р№ РґСѓС€",
0097:             },
0098:             {
0099:                 "action": "Р—Р°РїРёСЃС‹РІР°С‚СЊ 3 РёРґРµРё РІ РґРµРЅСЊ",
0100:                 "place": "Р Р°Р±РѕС‡РёР№ СЃС‚РѕР»",
0101:                 "time": time(19, 0),
0102:                 "frequency": 1,
0103:                 "duration": 90,
0104:                 "reward": "Р’РµС‡РµСЂРЅСЏСЏ РїСЂРѕРіСѓР»РєР°",
0105:             },
0106:             {
0107:                 "action": "РњРµРґРёС‚РёСЂРѕРІР°С‚СЊ 2 РјРёРЅСѓС‚С‹",
0108:                 "place": "РўРёС…Р°СЏ РєРѕРјРЅР°С‚Р°",
0109:                 "time": time(8, 0),
0110:                 "frequency": 1,
0111:                 "duration": 120,
0112:                 "reward": "Р—РґРѕСЂРѕРІС‹Р№ Р·Р°РІС‚СЂР°Рє",
0113:             },
0114:             {
0115:                 "action": "РџР»Р°РЅРёСЂРѕРІР°С‚СЊ РІРµС‡РµСЂРЅСЋСЋ РїСЂРѕРіСѓР»РєСѓ",
0116:                 "place": "Р Р°Р±РѕС‡РёР№ СЃС‚РѕР»",
0117:                 "time": time(18, 0),
0118:                 "frequency": 1,
0119:                 "duration": 60,
0120:                 "reward": "РЎРІРµР¶РёР№ РІРѕР·РґСѓС…",
0121:             },
0122:             {
0123:                 "action": 'Р’С‹РїРѕР»РЅСЏС‚СЊ СѓРїСЂР°Р¶РЅРµРЅРёРµ "РџР»Р°РЅРєР°"',
0124:                 "place": "Р”РѕРјР°",
0125:                 "time": time(20, 0),
0126:                 "frequency": 1,
0127:                 "duration": 120,
0128:                 "reward": "Р Р°СЃС‚СЏР¶РєР°",
0129:             },
0130:             {
0131:                 "action": "РР·СѓС‡Р°С‚СЊ 5 РЅРѕРІС‹С… РёРЅРѕСЃС‚СЂР°РЅРЅС‹С… СЃР»РѕРІ",
0132:                 "place": "Р Р°Р±РѕС‡РµРµ РјРµСЃС‚Рѕ",
0133:                 "time": time(9, 0),
0134:                 "frequency": 1,
0135:                 "duration": 90,
0136:                 "reward": "РџРµСЂРµСЂС‹РІ РЅР° С‡Р°Р№",
0137:             },
0138:             {
0139:                 "action": "РЎРѕСЃС‚Р°РІР»СЏС‚СЊ РїР»Р°РЅ РЅР° РґРµРЅСЊ",
0140:                 "place": "Р Р°Р±РѕС‡РёР№ СЃС‚РѕР»",
0141:                 "time": time(8, 30),
0142:                 "frequency": 1,
0143:                 "duration": 60,
0144:                 "reward": "РџСЂРѕРґСѓРєС‚РёРІРЅС‹Р№ СЂР°Р±РѕС‡РёР№ РґРµРЅСЊ",
0145:             },
0146:             {
0147:                 "action": "Р’С‹РїРѕР»РЅСЏС‚СЊ РґС‹С…Р°С‚РµР»СЊРЅС‹Рµ СѓРїСЂР°Р¶РЅРµРЅРёСЏ",
0148:                 "place": "РЈРµРґРёРЅРµРЅРЅРѕРµ РјРµСЃС‚Рѕ",
0149:                 "time": time(12, 0),
0150:                 "frequency": 1,
0151:                 "duration": 120,
0152:                 "reward": "РЎРІРµР¶РёР№ РІРѕР·РґСѓС…",
0153:             },
0154:             {
0155:                 "action": "РџСЂРѕРІРµСЂСЏС‚СЊ РѕСЃР°РЅРєСѓ",
0156:                 "place": "Р Р°Р±РѕС‡РµРµ РјРµСЃС‚Рѕ",
0157:                 "time": time(10, 0),
0158:                 "frequency": 2,
0159:                 "duration": 30,
0160:                 "reward": "РњРёРЅСѓС‚РєР° РѕС‚РґС‹С…Р°",
0161:             },
0162:             {
0163:                 "action": "РќР°РїРѕР»РЅСЏС‚СЊ Р±СѓС‚С‹Р»РєСѓ РІРѕРґРѕР№",
0164:                 "place": "РљСѓС…РЅСЏ",
0165:                 "time": time(8, 0),
0166:                 "frequency": 1,
0167:                 "duration": 60,
0168:                 "reward": "Р—РґРѕСЂРѕРІРѕРµ С‚РµР»Рѕ",
0169:             },
0170:             {
0171:                 "action": "Р’С‹РїРѕР»РЅСЏС‚СЊ СѓРїСЂР°Р¶РЅРµРЅРёСЏ РґР»СЏ РіР»Р°Р·",
0172:                 "place": "Р Р°Р±РѕС‡РµРµ РјРµСЃС‚Рѕ",
0173:                 "time": time(15, 0),
0174:                 "frequency": 1,
0175:                 "duration": 120,
0176:                 "reward": "РћС‚РґС‹С… РѕС‚ СЌРєСЂР°РЅР°",
0177:             },
0178:             {
0179:                 "action": "РџР»Р°РЅРёСЂРѕРІР°С‚СЊ Р·РґРѕСЂРѕРІС‹Р№ СѓР¶РёРЅ",
0180:                 "place": "РљСѓС…РЅСЏ",
0181:                 "time": time(19, 30),
0182:                 "frequency": 1,
0183:                 "duration": 120,
0184:                 "reward": "Р’РєСѓСЃРЅР°СЏ РµРґР°",
0185:             },
0186:             {
0187:                 "action": "РџРёСЃР°С‚СЊ РІ РґРЅРµРІРЅРёРє Р±Р»Р°РіРѕРґР°СЂРЅРѕСЃС‚Рё",
0188:                 "place": "РЎРїР°Р»СЊРЅСЏ",
0189:                 "time": time(22, 0),
0190:                 "frequency": 1,
0191:                 "duration": 120,
0192:                 "reward": "РЎРїРѕРєРѕР№РЅС‹Р№ СЃРѕРЅ",
0193:             },
0194:         ]
0195: 
0196:         created_count = len(pleasant_habits)
0197: 
0198:         for data in useful_data:
0199:             # РЎР»СѓС‡Р°Р№РЅС‹Рј РѕР±СЂР°Р·РѕРј СЂРµС€Р°РµРј, Р±СѓРґРµС‚ Р»Рё Сѓ РїСЂРёРІС‹С‡РєРё СЃРІСЏР·Р°РЅРЅР°СЏ РїСЂРёРІС‹С‡РєР° РёР»Рё РІРѕР·РЅР°РіСЂР°Р¶РґРµРЅРёРµ
0200:             has_related = random.choice([True, False]) and pleasant_habits
0201: 
0202:             habit_data = {"user": user, "is_pleasant": False, "is_public": True, "related_habit": None, "reward": None}
0203:             habit_data.update(data)
0204: 
0205:             if has_related:
0206:                 habit_data["related_habit"] = random.choice(pleasant_habits)
0207:             else:
0208:                 habit_data["reward"] = data["reward"]
0209: 
0210:             habit = Habit.objects.create(**habit_data)
0211:             created_count += 1
0212:             self.stdout.write(f"РЎРѕР·РґР°РЅР° РїРѕР»РµР·РЅР°СЏ РїСЂРёРІС‹С‡РєР°: {habit.action}")
0213: 
0214:         self.stdout.write(
0215:             self.style.SUCCESS(
0216:                 f"РЈСЃРїРµС€РЅРѕ СЃРѕР·РґР°РЅРѕ {created_count} РїСѓР±Р»РёС‡РЅС‹С… РїСЂРёРІС‹С‡РµРє! "
0217:                 f"РўРµРїРµСЂСЊ РёС… РјРѕР¶РЅРѕ СѓРІРёРґРµС‚СЊ РїРѕ Р°РґСЂРµСЃСѓ: /habit_tracker/html/habits/public/"
0218:             )
0219:         )

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\management\commands\notifications.py
================================================================================
0001: from django.contrib.auth import get_user_model
0002: from django.core.management.base import BaseCommand
0003: 
0004: from habits.tasks import send_test_notification
0005: 
0006: User = get_user_model()
0007: 
0008: 
0009: class Command(BaseCommand):
0010:     help = "Р‘С‹СЃС‚СЂР°СЏ РїСЂРѕРІРµСЂРєР° СѓРІРµРґРѕРјР»РµРЅРёР№"
0011: 
0012:     def handle(self, *args, **options):
0013:         self.stdout.write("рџ”” Testing notifications...")
0014: 
0015:         # РџСЂРѕРІРµСЂСЏРµРј РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№ СЃ Telegram
0016:         users_with_telegram = User.objects.filter(telegram_chat_id__isnull=False)
0017:         self.stdout.write(f"Found {users_with_telegram.count()} users with Telegram")
0018: 
0019:         for user in users_with_telegram:
0020:             self.stdout.write(f"Sending test to {user.username}...")
0021:             result = send_test_notification.delay()
0022:             self.stdout.write(f"Result: {result.result}")

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\management\commands\run_bot.py
================================================================================
0001: import asyncio
0002: import logging
0003: 
0004: from django.core.management.base import BaseCommand
0005: 
0006: from habits.telegram_bot import HabitTrackerBot
0007: 
0008: logger = logging.getLogger(__name__)
0009: 
0010: 
0011: class Command(BaseCommand):
0012:     help = "Р—Р°РїСѓСЃРє Telegram Р±РѕС‚Р° РґР»СЏ С‚СЂРµРєРµСЂР° РїСЂРёРІС‹С‡РµРє"
0013: 
0014:     def handle(self, *args, **options):
0015:         self.stdout.write("Starting Telegram bot...")
0016: 
0017:         try:
0018:             bot = HabitTrackerBot()
0019: 
0020:             # Р—Р°РїСѓСЃРєР°РµРј Р±РѕС‚Р° РІ asyncio event loop
0021:             loop = asyncio.get_event_loop()
0022:             if loop.is_running():
0023:                 # Р•СЃР»Рё loop СѓР¶Рµ Р·Р°РїСѓС‰РµРЅ (РЅР°РїСЂРёРјРµСЂ, РІ Django 4.x+)
0024:                 loop.create_task(bot.run())
0025:             else:
0026:                 # Р”Р»СЏ Django 3.x Рё СЃС‚Р°СЂС‹С… РІРµСЂСЃРёР№
0027:                 loop.run_until_complete(bot.run())
0028: 
0029:         except Exception as e:
0030:             logger.error(f"Bot error: {e}")
0031:             self.stdout.write(self.style.ERROR(f"Bot error: {e}"))

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\management\commands\test_notification.py
================================================================================
0001: from django.contrib.auth import get_user_model
0002: from django.core.management.base import BaseCommand
0003: 
0004: from habits.models import Habit
0005: from habits.tasks import send_habit_reminder, send_test_notification
0006: 
0007: User = get_user_model()
0008: 
0009: 
0010: class Command(BaseCommand):
0011:     help = "РћС‚РїСЂР°РІРєР° С‚РµСЃС‚РѕРІРѕРіРѕ СѓРІРµРґРѕРјР»РµРЅРёСЏ"
0012: 
0013:     def add_arguments(self, parser):
0014:         parser.add_argument("--habit", type=int, help="Send reminder for specific habit ID")
0015:         parser.add_argument("--user", type=str, help="Send to specific username")
0016: 
0017:     def handle(self, *args, **options):
0018:         if options["habit"]:
0019:             # РћС‚РїСЂР°РІРєР° РЅР°РїРѕРјРёРЅР°РЅРёСЏ РґР»СЏ РєРѕРЅРєСЂРµС‚РЅРѕР№ РїСЂРёРІС‹С‡РєРё
0020:             habit_id = options["habit"]
0021:             self.stdout.write(f"Sending reminder for habit {habit_id}...")
0022:             result = send_habit_reminder.delay(habit_id)
0023:             self.stdout.write(self.style.SUCCESS(f"Result: {result.result}"))
0024: 
0025:         elif options["user"]:
0026:             # РћС‚РїСЂР°РІРєР° С‚РµСЃС‚РѕРІРѕРіРѕ СѓРІРµРґРѕРјР»РµРЅРёСЏ РєРѕРЅРєСЂРµС‚РЅРѕРјСѓ РїРѕР»СЊР·РѕРІР°С‚РµР»СЋ
0027:             username = options["user"]
0028:             user = User.objects.filter(username=username).first()
0029:             if user and user.telegram_chat_id:
0030:                 from habits.tasks import send_telegram_message
0031: 
0032:                 message = f"рџ§Є РўРµСЃС‚РѕРІРѕРµ СѓРІРµРґРѕРјР»РµРЅРёРµ РґР»СЏ {username}"
0033:                 success = send_telegram_message(user.telegram_chat_id, message)
0034:                 self.stdout.write(self.style.SUCCESS(f"Notification sent: {success}"))
0035:             else:
0036:                 self.stdout.write(self.style.ERROR("User not found or no Telegram chat_id"))
0037: 
0038:         else:
0039:             # РћР±С‹С‡РЅРѕРµ С‚РµСЃС‚РѕРІРѕРµ СѓРІРµРґРѕРјР»РµРЅРёРµ
0040:             self.stdout.write("Sending test notification...")
0041:             result = send_test_notification.delay()
0042:             self.stdout.write(self.style.SUCCESS(f"Result: {result.result}"))

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\management\commands\__init__.py
================================================================================

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\management\__init__.py
================================================================================

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\migrations\0001_initial.py
================================================================================
0001: # Generated by Django 5.2.6 on 2025-09-19 18:33
0002: 
0003: import django.db.models.deletion
0004: from django.conf import settings
0005: from django.db import migrations, models
0006: 
0007: import habits.validators
0008: 
0009: 
0010: class Migration(migrations.Migration):
0011: 
0012:     initial = True
0013: 
0014:     dependencies = [
0015:         migrations.swappable_dependency(settings.AUTH_USER_MODEL),
0016:     ]
0017: 
0018:     operations = [
0019:         migrations.CreateModel(
0020:             name="Habit",
0021:             fields=[
0022:                 ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
0023:                 (
0024:                     "place",
0025:                     models.CharField(
0026:                         help_text="РњРµСЃС‚Рѕ, РІ РєРѕС‚РѕСЂРѕРј РЅРµРѕР±С…РѕРґРёРјРѕ РІС‹РїРѕР»РЅСЏС‚СЊ РїСЂРёРІС‹С‡РєСѓ",
0027:                         max_length=255,
0028:                         verbose_name="РњРµСЃС‚Рѕ РІС‹РїРѕР»РЅРµРЅРёСЏ",
0029:                     ),
0030:                 ),
0031:                 (
0032:                     "time",
0033:                     models.TimeField(
0034:                         help_text="Р’СЂРµРјСЏ, РєРѕРіРґР° РЅРµРѕР±С…РѕРґРёРјРѕ РІС‹РїРѕР»РЅСЏС‚СЊ РїСЂРёРІС‹С‡РєСѓ", verbose_name="Р’СЂРµРјСЏ РІС‹РїРѕР»РЅРµРЅРёСЏ"
0035:                     ),
0036:                 ),
0037:                 (
0038:                     "action",
0039:                     models.CharField(
0040:                         help_text="РљРѕРЅРєСЂРµС‚РЅРѕРµ РґРµР№СЃС‚РІРёРµ, РєРѕС‚РѕСЂРѕРµ РїСЂРµРґСЃС‚Р°РІР»СЏРµС‚ СЃРѕР±РѕР№ РїСЂРёРІС‹С‡РєР°",
0041:                         max_length=255,
0042:                         verbose_name="Р”РµР№СЃС‚РІРёРµ",
0043:                     ),
0044:                 ),
0045:                 (
0046:                     "is_pleasant",
0047:                     models.BooleanField(
0048:                         default=False,
0049:                         help_text="РЇРІР»СЏРµС‚СЃСЏ Р»Рё РїСЂРёРІС‹С‡РєР° РїСЂРёСЏС‚РЅРѕР№ (РІРѕР·РЅР°РіСЂР°Р¶РґРµРЅРёРµРј)",
0050:                         verbose_name="РџСЂРёР·РЅР°Рє РїСЂРёСЏС‚РЅРѕР№ РїСЂРёРІС‹С‡РєРё",
0051:                     ),
0052:                 ),
0053:                 (
0054:                     "reward",
0055:                     models.CharField(
0056:                         blank=True,
0057:                         help_text="Р§РµРј РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ РґРѕР»Р¶РµРЅ СЃРµР±СЏ РІРѕР·РЅР°РіСЂР°РґРёС‚СЊ РїРѕСЃР»Рµ РІС‹РїРѕР»РЅРµРЅРёСЏ",
0058:                         max_length=255,
0059:                         null=True,
0060:                         verbose_name="Р’РѕР·РЅР°РіСЂР°Р¶РґРµРЅРёРµ",
0061:                     ),
0062:                 ),
0063:                 (
0064:                     "frequency",
0065:                     models.PositiveIntegerField(
0066:                         default=1,
0067:                         help_text="РџРµСЂРёРѕРґРёС‡РЅРѕСЃС‚СЊ РІС‹РїРѕР»РЅРµРЅРёСЏ РїСЂРёРІС‹С‡РєРё (СЂР°Р· РІ СЃРєРѕР»СЊРєРѕ РґРЅРµР№)",
0068:                         validators=[habits.validators.validate_habit_frequency],
0069:                         verbose_name="РџРµСЂРёРѕРґРёС‡РЅРѕСЃС‚СЊ (РІ РґРЅСЏС…)",
0070:                     ),
0071:                 ),
0072:                 (
0073:                     "duration",
0074:                     models.PositiveIntegerField(
0075:                         help_text="Р’СЂРµРјСЏ, РєРѕС‚РѕСЂРѕРµ РїСЂРµРґРїРѕР»РѕР¶РёС‚РµР»СЊРЅРѕ РїРѕС‚СЂР°С‚РёС‚ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ РЅР° РІС‹РїРѕР»РЅРµРЅРёРµ РїСЂРёРІС‹С‡РєРё",
0076:                         validators=[habits.validators.validate_habit_duration],
0077:                         verbose_name="Р’СЂРµРјСЏ РЅР° РІС‹РїРѕР»РЅРµРЅРёРµ (РІ СЃРµРєСѓРЅРґР°С…)",
0078:                     ),
0079:                 ),
0080:                 (
0081:                     "is_public",
0082:                     models.BooleanField(
0083:                         default=False,
0084:                         help_text="РњРѕРіСѓС‚ Р»Рё РґСЂСѓРіРёРµ РїРѕР»СЊР·РѕРІР°С‚РµР»Рё РІРёРґРµС‚СЊ СЌС‚Сѓ РїСЂРёРІС‹С‡РєСѓ",
0085:                         verbose_name="РџСЂРёР·РЅР°Рє РїСѓР±Р»РёС‡РЅРѕСЃС‚Рё",
0086:                     ),
0087:                 ),
0088:                 ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Р”Р°С‚Р° СЃРѕР·РґР°РЅРёСЏ")),
0089:                 ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Р”Р°С‚Р° РѕР±РЅРѕРІР»РµРЅРёСЏ")),
0090:                 (
0091:                     "related_habit",
0092:                     models.ForeignKey(
0093:                         blank=True,
0094:                         help_text="РџСЂРёСЏС‚РЅР°СЏ РїСЂРёРІС‹С‡РєР°, РєРѕС‚РѕСЂР°СЏ РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ РїРѕСЃР»Рµ РѕСЃРЅРѕРІРЅРѕР№",
0095:                         null=True,
0096:                         on_delete=django.db.models.deletion.SET_NULL,
0097:                         related_name="related_habits",
0098:                         to="habits.habit",
0099:                         verbose_name="РЎРІСЏР·Р°РЅРЅР°СЏ РїСЂРёРІС‹С‡РєР°",
0100:                     ),
0101:                 ),
0102:                 (
0103:                     "user",
0104:                     models.ForeignKey(
0105:                         on_delete=django.db.models.deletion.CASCADE,
0106:                         related_name="habits",
0107:                         to=settings.AUTH_USER_MODEL,
0108:                         verbose_name="РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ",
0109:                     ),
0110:                 ),
0111:             ],
0112:             options={
0113:                 "verbose_name": "РџСЂРёРІС‹С‡РєР°",
0114:                 "verbose_name_plural": "РџСЂРёРІС‹С‡РєРё",
0115:                 "ordering": ["-created_at"],
0116:             },
0117:         ),
0118:     ]

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\migrations\__init__.py
================================================================================

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\admin.py
================================================================================
0001: from django.contrib import admin
0002: 
0003: from .models import Habit
0004: 
0005: 
0006: @admin.register(Habit)
0007: class HabitAdmin(admin.ModelAdmin):
0008:     list_display = ("user", "action", "time", "place", "is_pleasant", "is_public")
0009:     list_filter = ("is_pleasant", "is_public", "frequency")
0010:     search_fields = ("action", "place", "user__username")
0011:     readonly_fields = ("created_at", "updated_at")

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\apps.py
================================================================================
0001: from django.apps import AppConfig
0002: 
0003: 
0004: class HabbitsConfig(AppConfig):
0005:     default_auto_field = "django.db.models.BigAutoField"
0006:     name = "habits"

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\models.py
================================================================================
0001: from django.conf import settings
0002: from django.core.exceptions import ValidationError
0003: from django.core.validators import MaxValueValidator, MinValueValidator
0004: from django.db import models
0005: 
0006: from .validators import validate_habit_duration, validate_habit_frequency
0007: 
0008: 
0009: class Habit(models.Model):
0010:     """РњРѕРґРµР»СЊ РґР»СЏ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёСЏ РїСЂРёРІС‹С‡РµРє РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ"""
0011: 
0012:     # РћСЃРЅРѕРІРЅС‹Рµ РїРѕР»СЏ
0013:     user = models.ForeignKey(
0014:         settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="habits", verbose_name="РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ"
0015:     )
0016:     place = models.CharField(
0017:         max_length=255, verbose_name="РњРµСЃС‚Рѕ РІС‹РїРѕР»РЅРµРЅРёСЏ", help_text="РњРµСЃС‚Рѕ, РІ РєРѕС‚РѕСЂРѕРј РЅРµРѕР±С…РѕРґРёРјРѕ РІС‹РїРѕР»РЅСЏС‚СЊ РїСЂРёРІС‹С‡РєСѓ"
0018:     )
0019:     time = models.TimeField(verbose_name="Р’СЂРµРјСЏ РІС‹РїРѕР»РЅРµРЅРёСЏ", help_text="Р’СЂРµРјСЏ, РєРѕРіРґР° РЅРµРѕР±С…РѕРґРёРјРѕ РІС‹РїРѕР»РЅСЏС‚СЊ РїСЂРёРІС‹С‡РєСѓ")
0020:     action = models.CharField(
0021:         max_length=255, verbose_name="Р”РµР№СЃС‚РІРёРµ", help_text="РљРѕРЅРєСЂРµС‚РЅРѕРµ РґРµР№СЃС‚РІРёРµ, РєРѕС‚РѕСЂРѕРµ РїСЂРµРґСЃС‚Р°РІР»СЏРµС‚ СЃРѕР±РѕР№ РїСЂРёРІС‹С‡РєР°"
0022:     )
0023: 
0024:     # РЎРІСЏР·Р°РЅРЅС‹Рµ РїСЂРёРІС‹С‡РєРё Рё РІРѕР·РЅР°РіСЂР°Р¶РґРµРЅРёСЏ
0025:     is_pleasant = models.BooleanField(
0026:         default=False,
0027:         verbose_name="РџСЂРёР·РЅР°Рє РїСЂРёСЏС‚РЅРѕР№ РїСЂРёРІС‹С‡РєРё",
0028:         help_text="РЇРІР»СЏРµС‚СЃСЏ Р»Рё РїСЂРёРІС‹С‡РєР° РїСЂРёСЏС‚РЅРѕР№ (РІРѕР·РЅР°РіСЂР°Р¶РґРµРЅРёРµРј)",
0029:     )
0030:     related_habit = models.ForeignKey(
0031:         "self",
0032:         on_delete=models.SET_NULL,
0033:         null=True,
0034:         blank=True,
0035:         related_name="related_habits",
0036:         verbose_name="РЎРІСЏР·Р°РЅРЅР°СЏ РїСЂРёРІС‹С‡РєР°",
0037:         help_text="РџСЂРёСЏС‚РЅР°СЏ РїСЂРёРІС‹С‡РєР°, РєРѕС‚РѕСЂР°СЏ РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ РїРѕСЃР»Рµ РѕСЃРЅРѕРІРЅРѕР№",
0038:     )
0039:     reward = models.CharField(
0040:         max_length=255,
0041:         blank=True,
0042:         null=True,
0043:         verbose_name="Р’РѕР·РЅР°РіСЂР°Р¶РґРµРЅРёРµ",
0044:         help_text="Р§РµРј РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ РґРѕР»Р¶РµРЅ СЃРµР±СЏ РІРѕР·РЅР°РіСЂР°РґРёС‚СЊ РїРѕСЃР»Рµ РІС‹РїРѕР»РЅРµРЅРёСЏ",
0045:     )
0046: 
0047:     # РќР°СЃС‚СЂРѕР№РєРё РІС‹РїРѕР»РЅРµРЅРёСЏ
0048:     frequency = models.PositiveIntegerField(
0049:         default=1,
0050:         validators=[validate_habit_frequency],
0051:         verbose_name="РџРµСЂРёРѕРґРёС‡РЅРѕСЃС‚СЊ (РІ РґРЅСЏС…)",
0052:         help_text="РџРµСЂРёРѕРґРёС‡РЅРѕСЃС‚СЊ РІС‹РїРѕР»РЅРµРЅРёСЏ РїСЂРёРІС‹С‡РєРё (СЂР°Р· РІ СЃРєРѕР»СЊРєРѕ РґРЅРµР№)",
0053:     )
0054:     duration = models.PositiveIntegerField(
0055:         validators=[validate_habit_duration],
0056:         verbose_name="Р’СЂРµРјСЏ РЅР° РІС‹РїРѕР»РЅРµРЅРёРµ (РІ СЃРµРєСѓРЅРґР°С…)",
0057:         help_text="Р’СЂРµРјСЏ, РєРѕС‚РѕСЂРѕРµ РїСЂРµРґРїРѕР»РѕР¶РёС‚РµР»СЊРЅРѕ РїРѕС‚СЂР°С‚РёС‚ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ РЅР° РІС‹РїРѕР»РЅРµРЅРёРµ РїСЂРёРІС‹С‡РєРё",
0058:     )
0059: 
0060:     # Р’РёРґРёРјРѕСЃС‚СЊ
0061:     is_public = models.BooleanField(
0062:         default=False, verbose_name="РџСЂРёР·РЅР°Рє РїСѓР±Р»РёС‡РЅРѕСЃС‚Рё", help_text="РњРѕРіСѓС‚ Р»Рё РґСЂСѓРіРёРµ РїРѕР»СЊР·РѕРІР°С‚РµР»Рё РІРёРґРµС‚СЊ СЌС‚Сѓ РїСЂРёРІС‹С‡РєСѓ"
0063:     )
0064: 
0065:     # Р”Р°С‚С‹ РґР»СЏ РѕС‚СЃР»РµР¶РёРІР°РЅРёСЏ
0066:     created_at = models.DateTimeField(auto_now_add=True, verbose_name="Р”Р°С‚Р° СЃРѕР·РґР°РЅРёСЏ")
0067:     updated_at = models.DateTimeField(auto_now=True, verbose_name="Р”Р°С‚Р° РѕР±РЅРѕРІР»РµРЅРёСЏ")
0068: 
0069:     class Meta:
0070:         verbose_name = "РџСЂРёРІС‹С‡РєР°"
0071:         verbose_name_plural = "РџСЂРёРІС‹С‡РєРё"
0072:         ordering = ["-created_at"]
0073: 
0074:     def __str__(self):
0075:         return f"{self.user.username}: {self.action} РІ {self.time}"
0076: 
0077:     def clean(self):
0078:         """РљР°СЃС‚РѕРјРЅР°СЏ РІР°Р»РёРґР°С†РёСЏ РјРѕРґРµР»Рё"""
0079:         errors = {}
0080: 
0081:         # 1. РСЃРєР»СЋС‡РёС‚СЊ РѕРґРЅРѕРІСЂРµРјРµРЅРЅС‹Р№ РІС‹Р±РѕСЂ СЃРІСЏР·Р°РЅРЅРѕР№ РїСЂРёРІС‹С‡РєРё Рё СѓРєР°Р·Р°РЅРёСЏ РІРѕР·РЅР°РіСЂР°Р¶РґРµРЅРёСЏ
0082:         if self.related_habit and self.reward:
0083:             errors["reward"] = "РќРµР»СЊР·СЏ СѓРєР°Р·С‹РІР°С‚СЊ РѕРґРЅРѕРІСЂРµРјРµРЅРЅРѕ Рё СЃРІСЏР·Р°РЅРЅСѓСЋ РїСЂРёРІС‹С‡РєСѓ, Рё РІРѕР·РЅР°РіСЂР°Р¶РґРµРЅРёРµ"
0084:             errors["related_habit"] = "РќРµР»СЊР·СЏ СѓРєР°Р·С‹РІР°С‚СЊ РѕРґРЅРѕРІСЂРµРјРµРЅРЅРѕ Рё СЃРІСЏР·Р°РЅРЅСѓСЋ РїСЂРёРІС‹С‡РєСѓ, Рё РІРѕР·РЅР°РіСЂР°Р¶РґРµРЅРёРµ"
0085: 
0086:         # 2. Р’ СЃРІСЏР·Р°РЅРЅС‹Рµ РїСЂРёРІС‹С‡РєРё РјРѕРіСѓС‚ РїРѕРїР°РґР°С‚СЊ С‚РѕР»СЊРєРѕ РїСЂРёРІС‹С‡РєРё СЃ РїСЂРёР·РЅР°РєРѕРј РїСЂРёСЏС‚РЅРѕР№ РїСЂРёРІС‹С‡РєРё
0087:         if self.related_habit and not self.related_habit.is_pleasant:
0088:             errors["related_habit"] = "Р’ СЃРІСЏР·Р°РЅРЅС‹Рµ РїСЂРёРІС‹С‡РєРё РјРѕРіСѓС‚ РїРѕРїР°РґР°С‚СЊ С‚РѕР»СЊРєРѕ РїСЂРёСЏС‚РЅС‹Рµ РїСЂРёРІС‹С‡РєРё"
0089: 
0090:         # 3. РЈ РїСЂРёСЏС‚РЅРѕР№ РїСЂРёРІС‹С‡РєРё РЅРµ РјРѕР¶РµС‚ Р±С‹С‚СЊ РІРѕР·РЅР°РіСЂР°Р¶РґРµРЅРёСЏ РёР»Рё СЃРІСЏР·Р°РЅРЅРѕР№ РїСЂРёРІС‹С‡РєРё
0091:         if self.is_pleasant:
0092:             if self.reward:
0093:                 errors["reward"] = "РЈ РїСЂРёСЏС‚РЅРѕР№ РїСЂРёРІС‹С‡РєРё РЅРµ РјРѕР¶РµС‚ Р±С‹С‚СЊ РІРѕР·РЅР°РіСЂР°Р¶РґРµРЅРёСЏ"
0094:             if self.related_habit:
0095:                 errors["related_habit"] = "РЈ РїСЂРёСЏС‚РЅРѕР№ РїСЂРёРІС‹С‡РєРё РЅРµ РјРѕР¶РµС‚ Р±С‹С‚СЊ СЃРІСЏР·Р°РЅРЅРѕР№ РїСЂРёРІС‹С‡РєРё"
0096:         else:
0097:             # 4. Р’СЂРµРјСЏ РІС‹РїРѕР»РЅРµРЅРёСЏ РїРѕР»РµР·РЅРѕР№ РїСЂРёРІС‹С‡РєРё РЅРµ Р±РѕР»СЊС€Рµ 120 СЃРµРєСѓРЅРґ
0098:             if self.duration > 120:
0099:                 errors["duration"] = "Р’СЂРµРјСЏ РІС‹РїРѕР»РЅРµРЅРёСЏ РїРѕР»РµР·РЅРѕР№ РїСЂРёРІС‹С‡РєРё РґРѕР»Р¶РЅРѕ Р±С‹С‚СЊ РЅРµ Р±РѕР»СЊС€Рµ 120 СЃРµРєСѓРЅРґ"
0100: 
0101:         # 5. РќРµР»СЊР·СЏ РІС‹РїРѕР»РЅСЏС‚СЊ РїСЂРёРІС‹С‡РєСѓ СЂРµР¶Рµ, С‡РµРј 1 СЂР°Р· РІ 7 РґРЅРµР№
0102:         if self.frequency > 7:
0103:             errors["frequency"] = "РќРµР»СЊР·СЏ РІС‹РїРѕР»РЅСЏС‚СЊ РїСЂРёРІС‹С‡РєСѓ СЂРµР¶Рµ, С‡РµРј 1 СЂР°Р· РІ 7 РґРЅРµР№"
0104: 
0105:         if errors:
0106:             raise ValidationError(errors)
0107: 
0108:     def save(self, *args, **kwargs):
0109:         """РџРµСЂРµРѕРїСЂРµРґРµР»СЏРµРј save РґР»СЏ РІС‹Р·РѕРІР° РїРѕР»РЅРѕР№ РІР°Р»РёРґР°С†РёРё"""
0110:         self.full_clean()
0111:         super().save(*args, **kwargs)

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\permissions.py
================================================================================
0001: from rest_framework import permissions
0002: 
0003: 
0004: class IsOwner(permissions.BasePermission):
0005:     """
0006:     Р Р°Р·СЂРµС€РµРЅРёРµ, РїРѕР·РІРѕР»СЏСЋС‰РµРµ СЂР°Р±РѕС‚Р°С‚СЊ С‚РѕР»СЊРєРѕ СЃРѕ СЃРІРѕРёРјРё РїСЂРёРІС‹С‡РєР°РјРё
0007:     """
0008: 
0009:     def has_object_permission(self, request, view, obj):
0010:         # Р Р°Р·СЂРµС€Р°РµРј РґРѕСЃС‚СѓРї С‚РѕР»СЊРєРѕ РµСЃР»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ СЏРІР»СЏРµС‚СЃСЏ РІР»Р°РґРµР»СЊС†РµРј РїСЂРёРІС‹С‡РєРё
0011:         return obj.user == request.user

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\serializers.py
================================================================================
0001: from django.core.exceptions import ValidationError
0002: from rest_framework import serializers
0003: 
0004: from .models import Habit
0005: 
0006: 
0007: class HabitSerializer(serializers.ModelSerializer):
0008:     """РЎРµСЂРёР°Р»РёР·Р°С‚РѕСЂ РґР»СЏ РїСЂРёРІС‹С‡РµРє"""
0009: 
0010:     class Meta:
0011:         model = Habit
0012:         fields = [
0013:             "id",
0014:             "user",
0015:             "place",
0016:             "time",
0017:             "action",
0018:             "is_pleasant",
0019:             "related_habit",
0020:             "reward",
0021:             "frequency",
0022:             "duration",
0023:             "is_public",
0024:             "created_at",
0025:             "updated_at",
0026:         ]
0027:         read_only_fields = ["user", "created_at", "updated_at"]
0028: 
0029:     def validate(self, data):
0030:         """Р”РѕРїРѕР»РЅРёС‚РµР»СЊРЅР°СЏ РІР°Р»РёРґР°С†РёСЏ РЅР° СѓСЂРѕРІРЅРµ СЃРµСЂРёР°Р»РёР·Р°С‚РѕСЂР°"""
0031:         # РџСЂРѕРІРµСЂСЏРµРј С‚Рµ Р¶Рµ СѓСЃР»РѕРІРёСЏ, С‡С‚Рѕ Рё РІ РјРѕРґРµР»Рё
0032:         related_habit = data.get("related_habit")
0033:         reward = data.get("reward")
0034:         is_pleasant = data.get("is_pleasant", self.instance.is_pleasant if self.instance else False)
0035: 
0036:         if related_habit and reward:
0037:             raise serializers.ValidationError("РќРµР»СЊР·СЏ СѓРєР°Р·С‹РІР°С‚СЊ РѕРґРЅРѕРІСЂРµРјРµРЅРЅРѕ Рё СЃРІСЏР·Р°РЅРЅСѓСЋ РїСЂРёРІС‹С‡РєСѓ, Рё РІРѕР·РЅР°РіСЂР°Р¶РґРµРЅРёРµ")
0038: 
0039:         if related_habit and not related_habit.is_pleasant:
0040:             raise serializers.ValidationError("Р’ СЃРІСЏР·Р°РЅРЅС‹Рµ РїСЂРёРІС‹С‡РєРё РјРѕРіСѓС‚ РїРѕРїР°РґР°С‚СЊ С‚РѕР»СЊРєРѕ РїСЂРёСЏС‚РЅС‹Рµ РїСЂРёРІС‹С‡РєРё")
0041: 
0042:         if is_pleasant:
0043:             if reward:
0044:                 raise serializers.ValidationError("РЈ РїСЂРёСЏС‚РЅРѕР№ РїСЂРёРІС‹С‡РєРё РЅРµ РјРѕР¶РµС‚ Р±С‹С‚СЊ РІРѕР·РЅР°РіСЂР°Р¶РґРµРЅРёСЏ")
0045:             if related_habit:
0046:                 raise serializers.ValidationError("РЈ РїСЂРёСЏС‚РЅРѕР№ РїСЂРёРІС‹С‡РєРё РЅРµ РјРѕР¶РµС‚ Р±С‹С‚СЊ СЃРІСЏР·Р°РЅРЅРѕР№ РїСЂРёРІС‹С‡РєРё")
0047: 
0048:         return data
0049: 
0050:     def create(self, validated_data):
0051:         """РђРІС‚РѕРјР°С‚РёС‡РµСЃРєРё РЅР°Р·РЅР°С‡Р°РµРј С‚РµРєСѓС‰РµРіРѕ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ"""
0052:         validated_data["user"] = self.context["request"].user
0053:         return super().create(validated_data)
0054: 
0055: 
0056: class PublicHabitSerializer(serializers.ModelSerializer):
0057:     """РЎРµСЂРёР°Р»РёР·Р°С‚РѕСЂ РґР»СЏ РїСѓР±Р»РёС‡РЅС‹С… РїСЂРёРІС‹С‡РµРє (С‚РѕР»СЊРєРѕ РґР»СЏ С‡С‚РµРЅРёСЏ)"""
0058: 
0059:     user = serializers.StringRelatedField(read_only=True)
0060: 
0061:     class Meta:
0062:         model = Habit
0063:         fields = ["id", "user", "place", "time", "action", "frequency", "duration", "created_at"]
0064:         read_only_fields = fields

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\tasks.py
================================================================================
0001: import logging
0002: 
0003: import requests
0004: from celery import shared_task
0005: from django.conf import settings
0006: from django.contrib.auth import get_user_model
0007: 
0008: logger = logging.getLogger(__name__)
0009: User = get_user_model()
0010: 
0011: # РќР°СЃС‚СЂР°РёРІР°РµРј Р»РѕРіРёСЂРѕРІР°РЅРёРµ
0012: logging.basicConfig(level=logging.INFO)
0013: logger.setLevel(logging.INFO)
0014: 
0015: 
0016: def send_habit_reminder(chat_id, message):
0017:     """РЎРёРЅС…СЂРѕРЅРЅР°СЏ РѕС‚РїСЂР°РІРєР° СЃРѕРѕР±С‰РµРЅРёСЏ РІ Telegram СЃ РїРѕРґСЂРѕР±РЅС‹Рј Р»РѕРіРёСЂРѕРІР°РЅРёРµРј"""
0018:     logger.info("=== РќРђР§РђР›Рћ РћРўРџР РђР’РљР TELEGRAM РЎРћРћР‘Р©Р•РќРРЇ ===")
0019:     logger.info(f"Chat ID: {chat_id}")
0020:     logger.info(f"Message: {message}")
0021: 
0022:     if not settings.TELEGRAM_BOT_TOKEN:
0023:         logger.error("вќЊ TELEGRAM_BOT_TOKEN РЅРµ РЅР°СЃС‚СЂРѕРµРЅ!")
0024:         return False
0025: 
0026:     logger.info("вњ… TELEGRAM_BOT_TOKEN РЅР°Р№РґРµРЅ")
0027: 
0028:     url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
0029:     payload = {"chat_id": chat_id, "text": message, "parse_mode": "HTML"}
0030: 
0031:     logger.info(f"URL: {url}")
0032:     logger.info(f"Payload: {payload}")
0033: 
0034:     try:
0035:         logger.info("рџ”„ РћС‚РїСЂР°РІРєР° Р·Р°РїСЂРѕСЃР° Рє Telegram API...")
0036:         response = requests.post(url, json=payload, timeout=10)
0037:         logger.info(f"вњ… РћС‚РІРµС‚ РїРѕР»СѓС‡РµРЅ. Status code: {response.status_code}")
0038:         logger.info(f"рџ“Ё Response text: {response.text}")
0039: 
0040:         if response.status_code == 200:
0041:             logger.info("рџЋ‰ РЎРѕРѕР±С‰РµРЅРёРµ СѓСЃРїРµС€РЅРѕ РѕС‚РїСЂР°РІР»РµРЅРѕ!")
0042:             return True
0043:         else:
0044:             logger.error(f"вќЊ РћС€РёР±РєР° Telegram API: {response.status_code}")
0045:             logger.error(f"рџ“ќ Р”РµС‚Р°Р»Рё: {response.text}")
0046:             return False
0047:     except Exception as e:
0048:         logger.error(f"рџ’Ґ РћС€РёР±РєР° РїСЂРё РѕС‚РїСЂР°РІРєРµ Р·Р°РїСЂРѕСЃР°: {e}")
0049:         return False
0050: 
0051: 
0052: @shared_task
0053: def send_habit_reminder_task(habit_id):
0054:     """Celery Р·Р°РґР°С‡Р° РґР»СЏ РѕС‚РїСЂР°РІРєРё РЅР°РїРѕРјРёРЅР°РЅРёСЏ Рѕ РїСЂРёРІС‹С‡РєРµ"""
0055:     from django.contrib.auth import get_user_model
0056: 
0057:     from .models import Habit
0058: 
0059:     User = get_user_model()
0060: 
0061:     try:
0062:         habit = Habit.objects.get(id=habit_id)
0063:         user = habit.user
0064: 
0065:         if not user.telegram_chat_id or not user.telegram_notifications:
0066:             return "вќЊ РЈ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РѕС‚РєР»СЋС‡РµРЅС‹ СѓРІРµРґРѕРјР»РµРЅРёСЏ РёР»Рё РЅРµ РїСЂРёРІСЏР·Р°РЅ Telegram"
0067: 
0068:         message = (
0069:             f"вЏ° <b>РќР°РїРѕРјРёРЅР°РЅРёРµ Рѕ РїСЂРёРІС‹С‡РєРµ!</b>\n\n"
0070:             f"РџСЂРёС€Р»Рѕ РІСЂРµРјСЏ РІС‹РїРѕР»РЅРёС‚СЊ: <b>{habit.action}</b>\n"
0071:             f"рџ•ђ Р’СЂРµРјСЏ: {habit.time.strftime('%H:%M')}\n"
0072:             f"рџ“Ќ РњРµСЃС‚Рѕ: {habit.place}\n"
0073:             f"вЏ± Р”Р»РёС‚РµР»СЊРЅРѕСЃС‚СЊ: {habit.duration} СЃРµРєСѓРЅРґ"
0074:         )
0075: 
0076:         success = send_habit_reminder(user.telegram_chat_id, message)
0077: 
0078:         if success:
0079:             return f"вњ… РќР°РїРѕРјРёРЅР°РЅРёРµ РѕС‚РїСЂР°РІР»РµРЅРѕ РґР»СЏ: {habit.action}"
0080:         else:
0081:             return f"вќЊ РћС€РёР±РєР° РїСЂРё РѕС‚РїСЂР°РІРєРµ РЅР°РїРѕРјРёРЅР°РЅРёСЏ"
0082: 
0083:     except Habit.DoesNotExist:
0084:         return "вќЊ РџСЂРёРІС‹С‡РєР° РЅРµ РЅР°Р№РґРµРЅР°"
0085:     except Exception as e:
0086:         return f"вќЊ РћС€РёР±РєР°: {str(e)}"
0087: 
0088: 
0089: @shared_task
0090: def debug_task():
0091:     """РЎР°РјР°СЏ РїСЂРѕСЃС‚Р°СЏ Р·Р°РґР°С‡Р° РґР»СЏ С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ"""
0092:     logger.info("=== Р’Р«РџРћР›РќР•РќРР• DEBUG TASK ===")
0093:     return "рџЋ‰ Debug task executed!"
0094: 
0095: 
0096: @shared_task
0097: def send_test_notification():
0098:     """РћС‚РїСЂР°РІРєР° С‚РµСЃС‚РѕРІРѕРіРѕ СѓРІРµРґРѕРјР»РµРЅРёСЏ СЃ РїРѕРґСЂРѕР±РЅС‹Рј Р»РѕРіРёСЂРѕРІР°РЅРёРµРј"""
0099:     logger.info("=== РќРђР§РђР›Рћ РћРўРџР РђР’РљР РўР•РЎРўРћР’РћР“Рћ РЈР’Р•Р”РћРњР›Р•РќРРЇ ===")
0100: 
0101:     # РќР°С…РѕРґРёРј РїРµСЂРІРѕРіРѕ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ СЃ Telegram
0102:     user = User.objects.filter(telegram_chat_id__isnull=False).first()
0103: 
0104:     if not user:
0105:         logger.error("вќЊ РќРµ РЅР°Р№РґРµРЅ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ СЃ telegram_chat_id")
0106:         return "вќЊ No users with Telegram"
0107: 
0108:     logger.info(f"вњ… РќР°Р№РґРµРЅ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ: {user.username}")
0109:     logger.info(f"рџ“± Chat ID: {user.telegram_chat_id}")
0110:     logger.info(f"рџ”” РЈРІРµРґРѕРјР»РµРЅРёСЏ РІРєР»СЋС‡РµРЅС‹: {user.telegram_notifications}")
0111: 
0112:     if not user.telegram_notifications:
0113:         logger.warning("вљ пёЏ РЈРІРµРґРѕРјР»РµРЅРёСЏ РѕС‚РєР»СЋС‡РµРЅС‹ Сѓ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ")
0114: 
0115:     message = (
0116:         "рџ§Є <b>РўРµСЃС‚РѕРІРѕРµ СѓРІРµРґРѕРјР»РµРЅРёРµ!</b>\n\n"
0117:         "Р­С‚Рѕ СЃРѕРѕР±С‰РµРЅРёРµ РїСЂРёС€Р»Рѕ С‡РµСЂРµР· СЃРёСЃС‚РµРјСѓ СѓРІРµРґРѕРјР»РµРЅРёР№.\n"
0118:         "вњ… Р’СЃРµ СЂР°Р±РѕС‚Р°РµС‚ РєРѕСЂСЂРµРєС‚РЅРѕ!\n\n"
0119:         "рџ’Є РўРµРїРµСЂСЊ РІС‹ Р±СѓРґРµС‚Рµ РїРѕР»СѓС‡Р°С‚СЊ РЅР°РїРѕРјРёРЅР°РЅРёСЏ Рѕ РїСЂРёРІС‹С‡РєР°С…!"
0120:     )
0121: 
0122:     logger.info("рџ”„ Р’С‹Р·РѕРІ С„СѓРЅРєС†РёРё РѕС‚РїСЂР°РІРєРё СЃРѕРѕР±С‰РµРЅРёСЏ...")
0123:     success = send_habit_reminder(user.telegram_chat_id, message)
0124: 
0125:     if success:
0126:         logger.info("рџЋ‰ Р—Р°РґР°С‡Р° РІС‹РїРѕР»РЅРµРЅР° СѓСЃРїРµС€РЅРѕ!")
0127:         return "вњ… РўРµСЃС‚РѕРІРѕРµ СѓРІРµРґРѕРјР»РµРЅРёРµ РѕС‚РїСЂР°РІР»РµРЅРѕ!"
0128:     else:
0129:         logger.error("вќЊ Р—Р°РґР°С‡Р° Р·Р°РІРµСЂС€РёР»Р°СЃСЊ СЃ РѕС€РёР±РєРѕР№")
0130:         return "вќЊ РћС€РёР±РєР° РїСЂРё РѕС‚РїСЂР°РІРєРµ СѓРІРµРґРѕРјР»РµРЅРёСЏ"
0131: 
0132: 
0133: @shared_task
0134: def check_and_send_habit_reminders():
0135:     """РџРµСЂРёРѕРґРёС‡РµСЃРєР°СЏ Р·Р°РґР°С‡Р° РґР»СЏ РїСЂРѕРІРµСЂРєРё Рё РѕС‚РїСЂР°РІРєРё РЅР°РїРѕРјРёРЅР°РЅРёР№ Рѕ РїСЂРёРІС‹С‡РєР°С…"""
0136:     import logging
0137:     from datetime import datetime, time
0138: 
0139:     import pytz
0140:     from django.contrib.auth import get_user_model
0141:     from django.utils import timezone
0142: 
0143:     from .models import Habit
0144: 
0145:     logger = logging.getLogger(__name__)
0146:     User = get_user_model()
0147: 
0148:     logger.info("=== рџ”Ќ Р—РђРџРЈРЎРљ РџР РћР’Р•Р РљР РќРђРџРћРњРРќРђРќРР™ Рћ РџР РР’Р«Р§РљРђРҐ ===")
0149: 
0150:     # РўРµРєСѓС‰РµРµ РІСЂРµРјСЏ РІ РњРѕСЃРєРІРµ
0151:     moscow_tz = pytz.timezone("Europe/Moscow")
0152:     now_moscow = timezone.now().astimezone(moscow_tz)
0153:     current_time_moscow = now_moscow.time()
0154: 
0155:     logger.info(f"РўРµРєСѓС‰РµРµ РІСЂРµРјСЏ РњРѕСЃРєРІР°: {current_time_moscow}")
0156: 
0157:     # Р’СЃРµ РїСЂРёРІС‹С‡РєРё РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№ СЃ Telegram
0158:     habits_to_check = Habit.objects.filter(
0159:         user__telegram_chat_id__isnull=False,
0160:         user__telegram_notifications=True,
0161:     )
0162: 
0163:     logger.info(f"РџСЂРёРІС‹С‡РµРє РґР»СЏ РїСЂРѕРІРµСЂРєРё: {habits_to_check.count()}")
0164: 
0165:     results = []
0166: 
0167:     for habit in habits_to_check:
0168:         try:
0169:             # Р’СЂРµРјСЏ РїСЂРёРІС‹С‡РєРё РІ Р±Р°Р·Рµ - СЌС‚Рѕ РјРѕСЃРєРѕРІСЃРєРѕРµ РІСЂРµРјСЏ (РїСЂРѕСЃС‚Рѕ TimeField)
0170:             habit_time_moscow = habit.time
0171: 
0172:             # РЎСЂР°РІРЅРёРІР°РµРј РІСЂРµРјСЏ
0173:             time_diff = abs(
0174:                 (current_time_moscow.hour * 60 + current_time_moscow.minute)
0175:                 - (habit_time_moscow.hour * 60 + habit_time_moscow.minute)
0176:             )
0177: 
0178:             logger.info(f"РџСЂРѕРІРµСЂРєР°: {habit.action} РІ {habit_time_moscow}")
0179:             logger.info(f"Р Р°Р·РЅРёС†Р° СЃ С‚РµРєСѓС‰РёРј {current_time_moscow}: {time_diff} РјРёРЅ")
0180: 
0181:             if time_diff <= 2:  # В±2 РјРёРЅСѓС‚С‹
0182:                 message = (
0183:                     f"вЏ° <b>Р’СЂРµРјСЏ РІС‹РїРѕР»РЅРёС‚СЊ РїСЂРёРІС‹С‡РєСѓ!</b>\n\n"
0184:                     f"<b>{habit.action}</b>\n"
0185:                     f"рџ•ђ Р’СЂРµРјСЏ: {habit_time_moscow.strftime('%H:%M')}\n"
0186:                     f"рџ“Ќ РњРµСЃС‚Рѕ: {habit.place}\n"
0187:                     f"вЏ± Р”Р»РёС‚РµР»СЊРЅРѕСЃС‚СЊ: {habit.duration} СЃРµРєСѓРЅРґ\n"
0188:                 )
0189: 
0190:                 if habit.reward:
0191:                     message += f"рџЋЃ Р’РѕР·РЅР°РіСЂР°Р¶РґРµРЅРёРµ: {habit.reward}\n"
0192:                 elif habit.related_habit:
0193:                     message += f"рџ”— РЎРІСЏР·Р°РЅРЅР°СЏ РїСЂРёРІС‹С‡РєР°: {habit.related_habit.action}\n"
0194: 
0195:                 message += f"\nрџ’Є РЈРґР°С‡Рё РІ РІС‹РїРѕР»РЅРµРЅРёРё!"
0196: 
0197:                 success = send_habit_reminder(habit.user.telegram_chat_id, message)
0198: 
0199:                 if success:
0200:                     results.append(f"вњ… РќР°РїРѕРјРёРЅР°РЅРёРµ РѕС‚РїСЂР°РІР»РµРЅРѕ: {habit.action}")
0201:                     logger.info(f"вњ… РЈРЎРџР•РҐ: РќР°РїРѕРјРёРЅР°РЅРёРµ РѕС‚РїСЂР°РІР»РµРЅРѕ!")
0202:                 else:
0203:                     results.append(f"вќЊ РћС€РёР±РєР° РѕС‚РїСЂР°РІРєРё: {habit.action}")
0204: 
0205:         except Exception as e:
0206:             error_msg = f"вќЊ РћС€РёР±РєР°: {str(e)}"
0207:             results.append(error_msg)
0208:             logger.error(error_msg)
0209: 
0210:     return "\n".join(results) if results else "в„№пёЏ РќР°РїРѕРјРёРЅР°РЅРёР№ РЅРµ РЅР°Р№РґРµРЅРѕ"

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\telegram_bot.py
================================================================================
0001: import logging
0002: 
0003: from asgiref.sync import sync_to_async
0004: from django.conf import settings
0005: from django.contrib.auth import get_user_model
0006: from telegram import Update
0007: from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
0008: 
0009: User = get_user_model()
0010: logger = logging.getLogger(__name__)
0011: 
0012: 
0013: class HabitTrackerBot:
0014:     def __init__(self):
0015:         if not settings.TELEGRAM_BOT_TOKEN:
0016:             raise ValueError("TELEGRAM_BOT_TOKEN not set in settings")
0017: 
0018:         self.token = settings.TELEGRAM_BOT_TOKEN
0019:         self.application = Application.builder().token(self.token).build()
0020:         self.setup_handlers()
0021: 
0022:     def setup_handlers(self):
0023:         """РќР°СЃС‚СЂРѕР№РєР° РѕР±СЂР°Р±РѕС‚С‡РёРєРѕРІ РєРѕРјР°РЅРґ"""
0024:         self.application.add_handler(CommandHandler("start", self.start))
0025:         self.application.add_handler(CommandHandler("help", self.help_command))
0026:         self.application.add_handler(CommandHandler("my_habits", self.my_habits))
0027:         self.application.add_handler(CommandHandler("notifications", self.toggle_notifications))
0028:         self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
0029: 
0030:     @sync_to_async
0031:     def get_user_by_chat_id(self, chat_id):
0032:         """РђСЃРёРЅС…СЂРѕРЅРЅРѕ РїРѕР»СѓС‡Р°РµРј РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РїРѕ chat_id"""
0033:         try:
0034:             return User.objects.get(telegram_chat_id=chat_id)
0035:         except User.DoesNotExist:
0036:             return None
0037: 
0038:     @sync_to_async
0039:     def get_user_by_email(self, email):
0040:         """РђСЃРёРЅС…СЂРѕРЅРЅРѕ РїРѕР»СѓС‡Р°РµРј РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РїРѕ email"""
0041:         try:
0042:             return User.objects.get(email=email)
0043:         except User.DoesNotExist:
0044:             return None
0045: 
0046:     @sync_to_async
0047:     def save_user(self, user):
0048:         """РђСЃРёРЅС…СЂРѕРЅРЅРѕ СЃРѕС…СЂР°РЅСЏРµРј РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ"""
0049:         user.save()
0050: 
0051:     @sync_to_async
0052:     def get_user_habits(self, user):
0053:         """РђСЃРёРЅС…СЂРѕРЅРЅРѕ РїРѕР»СѓС‡Р°РµРј РїСЂРёРІС‹С‡РєРё РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ"""
0054:         from .models import Habit  # Р›РѕРєР°Р»СЊРЅС‹Р№ РёРјРїРѕСЂС‚ С‡С‚РѕР±С‹ РёР·Р±РµР¶Р°С‚СЊ С†РёРєР»РёС‡РµСЃРєРёС… РёРјРїРѕСЂС‚РѕРІ
0055: 
0056:         return list(Habit.objects.filter(user=user, is_pleasant=False))
0057: 
0058:     async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
0059:         """РћР±СЂР°Р±РѕС‚С‡РёРє РєРѕРјР°РЅРґС‹ /start"""
0060:         chat_id = update.effective_chat.id
0061:         username = update.effective_user.username
0062: 
0063:         # РђСЃРёРЅС…СЂРѕРЅРЅРѕ РїСЂРѕРІРµСЂСЏРµРј, РїСЂРёРІСЏР·Р°РЅ Р»Рё СѓР¶Рµ СЌС‚РѕС‚ chat_id
0064:         existing_user = await self.get_user_by_chat_id(chat_id)
0065: 
0066:         if existing_user:
0067:             await update.message.reply_text(
0068:                 f"РЎ РІРѕР·РІСЂР°С‰РµРЅРёРµРј, {existing_user.username}! рџЋ‰\n\n"
0069:                 f"Р’Р°С€ Р°РєРєР°СѓРЅС‚ СѓР¶Рµ РїСЂРёРІСЏР·Р°РЅ.\n"
0070:                 f"РСЃРїРѕР»СЊР·СѓР№С‚Рµ /my_habits С‡С‚РѕР±С‹ РїРѕСЃРјРѕС‚СЂРµС‚СЊ СЃРІРѕРё РїСЂРёРІС‹С‡РєРё.\n"
0071:                 f"РСЃРїРѕР»СЊР·СѓР№С‚Рµ /notifications С‡С‚РѕР±С‹ СѓРїСЂР°РІР»СЏС‚СЊ СѓРІРµРґРѕРјР»РµРЅРёСЏРјРё."
0072:             )
0073:             return
0074: 
0075:         # РџСЂРѕСЃРёРј РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РІРІРµСЃС‚Рё email РґР»СЏ РїСЂРёРІСЏР·РєРё
0076:         await update.message.reply_text(
0077:             "рџ‘‹ Р”РѕР±СЂРѕ РїРѕР¶Р°Р»РѕРІР°С‚СЊ РІ РўСЂРµРєРµСЂ РџСЂРёРІС‹С‡РµРє!\n\n"
0078:             "Р”Р»СЏ РїСЂРёРІСЏР·РєРё Telegram Р°РєРєР°СѓРЅС‚Р° РІРІРµРґРёС‚Рµ РІР°С€ email, "
0079:             "РєРѕС‚РѕСЂС‹Р№ РІС‹ РёСЃРїРѕР»СЊР·РѕРІР°Р»Рё РїСЂРё СЂРµРіРёСЃС‚СЂР°С†РёРё РЅР° СЃР°Р№С‚Рµ.\n\n"
0080:             "РџСЂРёРјРµСЂ: user@example.com"
0081:         )
0082: 
0083:     async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
0084:         """РћР±СЂР°Р±РѕС‚С‡РёРє РєРѕРјР°РЅРґС‹ /help"""
0085:         help_text = """
0086: рџ¤– *РљРѕРјР°РЅРґС‹ Р±РѕС‚Р°:*
0087: /start - РќР°С‡Р°С‚СЊ СЂР°Р±РѕС‚Сѓ СЃ Р±РѕС‚РѕРј
0088: /my_habits - РџРѕРєР°Р·Р°С‚СЊ РјРѕРё РїСЂРёРІС‹С‡РєРё
0089: /notifications - Р’РєР»СЋС‡РёС‚СЊ/РІС‹РєР»СЋС‡РёС‚СЊ СѓРІРµРґРѕРјР»РµРЅРёСЏ
0090: /help - РџРѕРєР°Р·Р°С‚СЊ СЌС‚Рѕ СЃРѕРѕР±С‰РµРЅРёРµ
0091: 
0092: рџ“‹ *РљР°Рє СЌС‚Рѕ СЂР°Р±РѕС‚Р°РµС‚:*
0093: 1. Р‘РѕС‚ Р±СѓРґРµС‚ РїСЂРёСЃС‹Р»Р°С‚СЊ РЅР°РїРѕРјРёРЅР°РЅРёСЏ Рѕ РІР°С€РёС… РїСЂРёРІС‹С‡РєР°С…
0094: 2. Р’СЃРµ РґР°РЅРЅС‹Рµ СЃРёРЅС…СЂРѕРЅРёР·РёСЂСѓСЋС‚СЃСЏ СЃ РІР°С€РёРј Р°РєРєР°СѓРЅС‚РѕРј РЅР° СЃР°Р№С‚Рµ
0095: 
0096: рџ’Ў *Р”Р»СЏ РїСЂРёРІСЏР·РєРё Р°РєРєР°СѓРЅС‚Р° РїСЂРѕСЃС‚Рѕ РІРІРµРґРёС‚Рµ РІР°С€ email*
0097:         """
0098:         await update.message.reply_text(help_text, parse_mode="Markdown")
0099: 
0100:     async def my_habits(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
0101:         """РџРѕРєР°Р·Р°С‚СЊ РїСЂРёРІС‹С‡РєРё РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ"""
0102:         chat_id = update.effective_chat.id
0103: 
0104:         user = await self.get_user_by_chat_id(chat_id)
0105:         if not user:
0106:             await update.message.reply_text("вќЊ Р’Р°С€ Р°РєРєР°СѓРЅС‚ РЅРµ РїСЂРёРІСЏР·Р°РЅ. Р’РІРµРґРёС‚Рµ РІР°С€ email РґР»СЏ РїСЂРёРІСЏР·РєРё.")
0107:             return
0108: 
0109:         habits = await self.get_user_habits(user)
0110: 
0111:         if habits:
0112:             message = "рџ“‹ *Р’Р°С€Рё РїСЂРёРІС‹С‡РєРё:*\n\n"
0113:             for habit in habits:
0114:                 message += f"рџЋЇ *{habit.action}*\n"
0115:                 message += f"   вЏ° {habit.time.strftime('%H:%M')}\n"
0116:                 message += f"   рџ“Ќ {habit.place}\n"
0117:                 message += f"   рџ”„ СЂР°Р· РІ {habit.frequency} РґРЅРµР№\n\n"
0118:         else:
0119:             message = "РЈ РІР°СЃ РїРѕРєР° РЅРµС‚ РїСЂРёРІС‹С‡РµРє. РЎРѕР·РґР°Р№С‚Рµ РёС… РЅР° СЃР°Р№С‚Рµ! рџЊџ"
0120: 
0121:         await update.message.reply_text(message, parse_mode="Markdown")
0122: 
0123:     async def toggle_notifications(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
0124:         """Р’РєР»СЋС‡РёС‚СЊ/РІС‹РєР»СЋС‡РёС‚СЊ СѓРІРµРґРѕРјР»РµРЅРёСЏ"""
0125:         chat_id = update.effective_chat.id
0126: 
0127:         user = await self.get_user_by_chat_id(chat_id)
0128:         if not user:
0129:             await update.message.reply_text("вќЊ Р’Р°С€ Р°РєРєР°СѓРЅС‚ РЅРµ РїСЂРёРІСЏР·Р°РЅ. Р’РІРµРґРёС‚Рµ РІР°С€ email РґР»СЏ РїСЂРёРІСЏР·РєРё.")
0130:             return
0131: 
0132:         user.telegram_notifications = not user.telegram_notifications
0133:         await self.save_user(user)
0134: 
0135:         status = "РІРєР»СЋС‡РµРЅС‹" if user.telegram_notifications else "РІС‹РєР»СЋС‡РµРЅС‹"
0136:         await update.message.reply_text(
0137:             f"рџ”” РЈРІРµРґРѕРјР»РµРЅРёСЏ {status}!\n"
0138:             f"РўРµРїРµСЂСЊ РІС‹ {'Р±СѓРґРµС‚Рµ' if user.telegram_notifications else 'РЅРµ Р±СѓРґРµС‚Рµ'} РїРѕР»СѓС‡Р°С‚СЊ РЅР°РїРѕРјРёРЅР°РЅРёСЏ Рѕ РїСЂРёРІС‹С‡РєР°С…."
0139:         )
0140: 
0141:     async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
0142:         """РћР±СЂР°Р±РѕС‚РєР° С‚РµРєСЃС‚РѕРІС‹С… СЃРѕРѕР±С‰РµРЅРёР№ (РґР»СЏ РїСЂРёРІСЏР·РєРё РїРѕ email)"""
0143:         chat_id = update.effective_chat.id
0144:         text = update.message.text.strip()
0145:         telegram_username = update.effective_user.username
0146: 
0147:         # РџСЂРѕРІРµСЂСЏРµРј, СЏРІР»СЏРµС‚СЃСЏ Р»Рё СЃРѕРѕР±С‰РµРЅРёРµ email'РѕРј
0148:         if "@" in text and " " not in text:  # РџСЂРѕСЃС‚Р°СЏ РїСЂРѕРІРµСЂРєР° РЅР° email
0149:             # РџСЂРѕРІРµСЂСЏРµРј, РЅРµ РїСЂРёРІСЏР·Р°РЅ Р»Рё СѓР¶Рµ СЌС‚РѕС‚ chat_id
0150:             existing_user = await self.get_user_by_chat_id(chat_id)
0151:             if existing_user:
0152:                 await update.message.reply_text(
0153:                     f"вќЊ Р’Р°С€ Р°РєРєР°СѓРЅС‚ СѓР¶Рµ РїСЂРёРІСЏР·Р°РЅ Рє РїРѕР»СЊР·РѕРІР°С‚РµР»СЋ {existing_user.username}.\n"
0154:                     f"РСЃРїРѕР»СЊР·СѓР№С‚Рµ /my_habits С‡С‚РѕР±С‹ РїРѕСЃРјРѕС‚СЂРµС‚СЊ СЃРІРѕРё РїСЂРёРІС‹С‡РєРё."
0155:                 )
0156:                 return
0157: 
0158:             # РС‰РµРј РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РїРѕ email
0159:             user = await self.get_user_by_email(text)
0160:             if not user:
0161:                 await update.message.reply_text(
0162:                     "вќЊ РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ СЃ С‚Р°РєРёРј email РЅРµ РЅР°Р№РґРµРЅ.\n"
0163:                     "РџСЂРѕРІРµСЂСЊС‚Рµ РїСЂР°РІРёР»СЊРЅРѕСЃС‚СЊ email РёР»Рё Р·Р°СЂРµРіРёСЃС‚СЂРёСЂСѓР№С‚РµСЃСЊ РЅР° СЃР°Р№С‚Рµ."
0164:                 )
0165:                 return
0166: 
0167:             # РџСЂРѕРІРµСЂСЏРµРј, РЅРµ РїСЂРёРІСЏР·Р°РЅ Р»Рё email Рє РґСЂСѓРіРѕРјСѓ Telegram Р°РєРєР°СѓРЅС‚Сѓ
0168:             if user.telegram_chat_id:
0169:                 await update.message.reply_text(
0170:                     "вќЊ Р­С‚РѕС‚ email СѓР¶Рµ РїСЂРёРІСЏР·Р°РЅ Рє РґСЂСѓРіРѕРјСѓ Telegram Р°РєРєР°СѓРЅС‚Сѓ.\n"
0171:                     "РћР±СЂР°С‚РёС‚РµСЃСЊ Рє Р°РґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂСѓ РґР»СЏ СЂРµС€РµРЅРёСЏ РїСЂРѕР±Р»РµРјС‹."
0172:                 )
0173:                 return
0174: 
0175:             # РџСЂРёРІСЏР·С‹РІР°РµРј Telegram Рє РїРѕР»СЊР·РѕРІР°С‚РµР»СЋ
0176:             user.telegram_chat_id = chat_id
0177:             user.telegram_username = telegram_username
0178:             await self.save_user(user)
0179: 
0180:             await update.message.reply_text(
0181:                 f"вњ… РђРєРєР°СѓРЅС‚ СѓСЃРїРµС€РЅРѕ РїСЂРёРІСЏР·Р°РЅ!\n"
0182:                 f"Р”РѕР±СЂРѕ РїРѕР¶Р°Р»РѕРІР°С‚СЊ, {user.username}! рџЋ‰\n\n"
0183:                 f"РўРµРїРµСЂСЊ РІС‹ Р±СѓРґРµС‚Рµ РїРѕР»СѓС‡Р°С‚СЊ РЅР°РїРѕРјРёРЅР°РЅРёСЏ Рѕ СЃРІРѕРёС… РїСЂРёРІС‹С‡РєР°С….\n"
0184:                 f"РСЃРїРѕР»СЊР·СѓР№С‚Рµ /my_habits С‡С‚РѕР±С‹ РїРѕСЃРјРѕС‚СЂРµС‚СЊ СЃРІРѕРё РїСЂРёРІС‹С‡РєРё.\n"
0185:                 f"РСЃРїРѕР»СЊР·СѓР№С‚Рµ /notifications С‡С‚РѕР±С‹ СѓРїСЂР°РІР»СЏС‚СЊ СѓРІРµРґРѕРјР»РµРЅРёСЏРјРё."
0186:             )
0187:         else:
0188:             await update.message.reply_text(
0189:                 "рџ¤” РќРµ РїРѕРЅРёРјР°СЋ РІР°С€Рµ СЃРѕРѕР±С‰РµРЅРёРµ.\n\n"
0190:                 "Р”Р»СЏ РїСЂРёРІСЏР·РєРё Р°РєРєР°СѓРЅС‚Р° РІРІРµРґРёС‚Рµ РІР°С€ email.\n"
0191:                 "РџСЂРёРјРµСЂ: user@example.com\n\n"
0192:                 "РР»Рё РёСЃРїРѕР»СЊР·СѓР№С‚Рµ РєРѕРјР°РЅРґС‹:\n"
0193:                 "/help - РїРѕРєР°Р·Р°С‚СЊ СЃРїСЂР°РІРєСѓ"
0194:             )
0195: 
0196:     def run(self):
0197:         """Р—Р°РїСѓСЃРє Р±РѕС‚Р°"""
0198:         logger.info("Starting Telegram bot...")
0199:         self.application.run_polling()

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\tests.py
================================================================================
0001: from django.test import TestCase
0002: 
0003: # Create your tests here.

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\urls.py
================================================================================
0001: from django.urls import path
0002: 
0003: from .views import (
0004:     HabitDetailView,
0005:     HabitListCreateView,
0006:     HabitListView,
0007:     HabitRetrieveUpdateDestroyView,
0008:     NotificationsView,
0009:     PublicHabitListView,
0010:     PublicHabitsHTMLView,
0011:     SendTestNotificationView,
0012:     TestHabitReminderView,
0013:     ToggleNotificationsView
0014: )
0015: 
0016: app_name = "habits"
0017: 
0018: # API endpoints
0019: api_urlpatterns = [
0020:     path("api/habits/", HabitListCreateView.as_view(), name="api-habit-list"),
0021:     path("api/habits/<int:pk>/", HabitRetrieveUpdateDestroyView.as_view(), name="api-habit-detail"),
0022:     path("api/habits/public/", PublicHabitListView.as_view(), name="api-public-habits"),
0023:     path("api/notifications/test/", SendTestNotificationView.as_view(), name="send_test_notification"),
0024:     path("api/notifications/test-habit/", TestHabitReminderView.as_view(), name="test_habit_reminder"),
0025:     path("api/notifications/toggle/", ToggleNotificationsView.as_view(), name="toggle_notifications"),
0026: ]
0027: 
0028: # HTML endpoints
0029: html_urlpatterns = [
0030:     path("html/habits/", HabitListView.as_view(), name="html-habit-list"),
0031:     path("html/habits/<int:pk>/", HabitDetailView.as_view(), name="html-habit-detail"),
0032:     path("html/habits/public/", PublicHabitsHTMLView.as_view(), name="html-public-habits"),
0033:     path("html/notifications/", NotificationsView.as_view(), name="notifications"),
0034: ]
0035: 
0036: # РћР±СЉРµРґРёРЅСЏРµРј РІСЃРµ РїСѓС‚Рё
0037: urlpatterns = api_urlpatterns + html_urlpatterns

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\validators.py
================================================================================
0001: from django.core.exceptions import ValidationError
0002: 
0003: 
0004: def validate_habit_duration(value, is_pleasant=False):
0005:     """
0006:     Р’Р°Р»РёРґР°С‚РѕСЂ РґР»СЏ РІСЂРµРјРµРЅРё РІС‹РїРѕР»РЅРµРЅРёСЏ
0007:     РџРѕР»РµР·РЅР°СЏ РїСЂРёРІС‹С‡РєР°: РЅРµ Р±РѕР»СЊС€Рµ 120 СЃРµРєСѓРЅРґ
0008:     РџСЂРёСЏС‚РЅР°СЏ РїСЂРёРІС‹С‡РєР°: Р±РµР· РѕРіСЂР°РЅРёС‡РµРЅРёР№
0009:     """
0010:     if not is_pleasant and value > 120:
0011:         raise ValidationError(
0012:             "Р’СЂРµРјСЏ РІС‹РїРѕР»РЅРµРЅРёСЏ РїРѕР»РµР·РЅРѕР№ РїСЂРёРІС‹С‡РєРё РґРѕР»Р¶РЅРѕ Р±С‹С‚СЊ РЅРµ Р±РѕР»СЊС€Рµ 120 СЃРµРєСѓРЅРґ",
0013:             params={"value": value},
0014:         )
0015: 
0016: 
0017: def validate_habit_frequency(value):
0018:     """Р’Р°Р»РёРґР°С‚РѕСЂ РґР»СЏ РїРµСЂРёРѕРґРёС‡РЅРѕСЃС‚Рё (РЅРµ СЂРµР¶Рµ 1 СЂР°Р·Р° РІ 7 РґРЅРµР№)"""
0019:     if value > 7:
0020:         raise ValidationError(
0021:             "РќРµР»СЊР·СЏ РІС‹РїРѕР»РЅСЏС‚СЊ РїСЂРёРІС‹С‡РєСѓ СЂРµР¶Рµ, С‡РµРј 1 СЂР°Р· РІ 7 РґРЅРµР№",
0022:             params={"value": value},
0023:         )

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\views.py
================================================================================
0001: import json
0002: 
0003: from django.contrib import messages
0004: from django.contrib.auth.mixins import LoginRequiredMixin
0005: from django.http import Http404, JsonResponse
0006: from django.shortcuts import redirect
0007: from django.views import View
0008: from django.views.generic import DetailView, ListView, TemplateView
0009: from django_filters.rest_framework import DjangoFilterBackend
0010: from rest_framework import generics, permissions
0011: from rest_framework.filters import OrderingFilter
0012: 
0013: from .models import Habit
0014: from .permissions import IsOwner
0015: from .serializers import HabitSerializer, PublicHabitSerializer
0016: from .tasks import send_test_notification
0017: 
0018: 
0019: # API Views
0020: class HabitListCreateView(generics.ListCreateAPIView):
0021:     """API РґР»СЏ СЃРѕР·РґР°РЅРёСЏ Рё РїСЂРѕСЃРјРѕС‚СЂР° СЃРІРѕРёС… РїСЂРёРІС‹С‡РµРє"""
0022: 
0023:     serializer_class = HabitSerializer
0024:     permission_classes = [permissions.IsAuthenticated, IsOwner]
0025:     filter_backends = [DjangoFilterBackend, OrderingFilter]
0026:     filterset_fields = ["is_pleasant", "is_public"]
0027:     ordering_fields = ["time", "created_at"]
0028: 
0029:     def get_queryset(self):
0030:         return Habit.objects.filter(user=self.request.user)
0031: 
0032:     def perform_create(self, serializer):
0033:         serializer.save(user=self.request.user)
0034: 
0035: 
0036: class HabitRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
0037:     """API РґР»СЏ РїСЂРѕСЃРјРѕС‚СЂР°, РѕР±РЅРѕРІР»РµРЅРёСЏ Рё СѓРґР°Р»РµРЅРёСЏ РїСЂРёРІС‹С‡РєРё"""
0038: 
0039:     serializer_class = HabitSerializer
0040:     permission_classes = [permissions.IsAuthenticated, IsOwner]
0041: 
0042:     def get_queryset(self):
0043:         return Habit.objects.filter(user=self.request.user)
0044: 
0045: 
0046: class PublicHabitListView(generics.ListAPIView):
0047:     """API РґР»СЏ РїСЂРѕСЃРјРѕС‚СЂР° РїСѓР±Р»РёС‡РЅС‹С… РїСЂРёРІС‹С‡РµРє"""
0048: 
0049:     serializer_class = PublicHabitSerializer
0050:     permission_classes = [permissions.IsAuthenticated]
0051: 
0052:     def get_queryset(self):
0053:         return Habit.objects.filter(is_public=True).exclude(user=self.request.user)
0054: 
0055: 
0056: # HTML Views
0057: class HabitListView(LoginRequiredMixin, ListView):
0058:     """HTML СЃС‚СЂР°РЅРёС†Р° СЃРѕ СЃРїРёСЃРєРѕРј РїСЂРёРІС‹С‡РµРє РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ"""
0059: 
0060:     model = Habit
0061:     template_name = "habits/habit_list.html"
0062:     context_object_name = "habits"
0063:     paginate_by = 5
0064: 
0065:     def get_queryset(self):
0066:         queryset = Habit.objects.filter(user=self.request.user).order_by("-created_at")
0067: 
0068:         # РЈРїСЂРѕС‰РµРЅРЅР°СЏ С„РёР»СЊС‚СЂР°С†РёСЏ
0069:         habit_type = self.request.GET.get("type")
0070:         if habit_type == "useful":
0071:             return queryset.filter(is_pleasant=False)
0072:         elif habit_type == "pleasant":
0073:             return queryset.filter(is_pleasant=True)
0074: 
0075:         return queryset
0076: 
0077: 
0078: class PublicHabitsHTMLView(LoginRequiredMixin, ListView):
0079:     """HTML СЃС‚СЂР°РЅРёС†Р° СЃ РїСѓР±Р»РёС‡РЅС‹РјРё РїСЂРёРІС‹С‡РєР°РјРё"""
0080: 
0081:     model = Habit
0082:     template_name = "habits/public_habits.html"
0083:     context_object_name = "habits"
0084: 
0085:     def get_queryset(self):
0086:         queryset = Habit.objects.filter(is_public=True).exclude(user=self.request.user)
0087: 
0088:         # РЈРїСЂРѕС‰РµРЅРЅР°СЏ С„РёР»СЊС‚СЂР°С†РёСЏ
0089:         habit_type = self.request.GET.get("type")
0090:         if habit_type == "useful":
0091:             return queryset.filter(is_pleasant=False)
0092:         elif habit_type == "pleasant":
0093:             return queryset.filter(is_pleasant=True)
0094: 
0095:         return queryset
0096: 
0097: 
0098: class HabitDetailView(LoginRequiredMixin, DetailView):
0099:     """HTML СЃС‚СЂР°РЅРёС†Р° РґРµС‚Р°Р»СЊРЅРѕРіРѕ РїСЂРѕСЃРјРѕС‚СЂР° РїСЂРёРІС‹С‡РєРё"""
0100: 
0101:     model = Habit
0102:     template_name = "habits/habit_detail.html"
0103:     context_object_name = "habit"
0104: 
0105:     def get_queryset(self):
0106:         """РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ РјРѕР¶РµС‚ СЃРјРѕС‚СЂРµС‚СЊ С‚РѕР»СЊРєРѕ СЃРІРѕРё РїСЂРёРІС‹С‡РєРё РР›Р РїСѓР±Р»РёС‡РЅС‹Рµ РїСЂРёРІС‹С‡РєРё РґСЂСѓРіРёС… РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№"""
0107:         user_habits = Habit.objects.filter(user=self.request.user)
0108:         public_habits = Habit.objects.filter(is_public=True).exclude(user=self.request.user)
0109:         return user_habits | public_habits
0110: 
0111:     def get_object(self, queryset=None):
0112:         """РџРѕР»СѓС‡Р°РµРј РѕР±СЉРµРєС‚ СЃ РїСЂРѕРІРµСЂРєРѕР№ РїСЂР°РІ РґРѕСЃС‚СѓРїР°"""
0113:         if queryset is None:
0114:             queryset = self.get_queryset()
0115: 
0116:         pk = self.kwargs.get("pk")
0117:         try:
0118:             return queryset.get(pk=pk)
0119:         except Habit.DoesNotExist:
0120:             raise Http404("РџСЂРёРІС‹С‡РєР° РЅРµ РЅР°Р№РґРµРЅР° РёР»Рё Сѓ РІР°СЃ РЅРµС‚ РґРѕСЃС‚СѓРїР° Рє РЅРµР№")
0121: 
0122: 
0123: # HTML СЃС‚СЂР°РЅРёС†С‹ СѓРІРµРґРѕРјР»РµРЅРёР№
0124: class NotificationsView(LoginRequiredMixin, TemplateView):
0125:     """РЎС‚СЂР°РЅРёС†Р° СѓРїСЂР°РІР»РµРЅРёСЏ СѓРІРµРґРѕРјР»РµРЅРёСЏРјРё"""
0126: 
0127:     template_name = "habits/notifications.html"
0128: 
0129:     def get_context_data(self, **kwargs):
0130:         context = super().get_context_data(**kwargs)
0131:         context["habits"] = self.request.user.habits.all()
0132:         return context
0133: 
0134: 
0135: class SendTestNotificationView(LoginRequiredMixin, View):
0136:     """РћС‚РїСЂР°РІРєР° С‚РµСЃС‚РѕРІРѕРіРѕ СѓРІРµРґРѕРјР»РµРЅРёСЏ (РїСЂРѕСЃС‚Р°СЏ РІРµСЂСЃРёСЏ РґР»СЏ С„РѕСЂРј)"""
0137: 
0138:     def post(self, request):
0139:         from .tasks import send_test_notification
0140: 
0141:         if not request.user.telegram_chat_id:
0142:             messages.error(request, "вќЊ Telegram Р°РєРєР°СѓРЅС‚ РЅРµ РїСЂРёРІСЏР·Р°РЅ")
0143:             return redirect("habits:notifications")
0144: 
0145:         try:
0146:             result = send_test_notification.delay()
0147:             messages.success(request, f"вњ… {result.result}")
0148:         except Exception as e:
0149:             messages.error(request, f"вќЊ РћС€РёР±РєР°: {str(e)}")
0150: 
0151:         return redirect("habits:notifications")
0152: 
0153: 
0154: class TestHabitReminderView(LoginRequiredMixin, View):
0155:     def post(self, request):
0156:         from .tasks import send_habit_reminder_task
0157: 
0158:         if not request.user.telegram_chat_id:
0159:             messages.error(request, "вќЊ Telegram Р°РєРєР°СѓРЅС‚ РЅРµ РїСЂРёРІСЏР·Р°РЅ")
0160:             return redirect("habits:notifications")
0161: 
0162:         user_habits = request.user.habits.all()
0163:         if not user_habits.exists():
0164:             messages.error(request, "вќЊ РЈ РІР°СЃ РЅРµС‚ РїСЂРёРІС‹С‡РµРє РґР»СЏ С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ")
0165:             return redirect("habits:notifications")
0166: 
0167:         try:
0168:             habit = user_habits.first()
0169:             result = send_habit_reminder_task.delay(habit.id)
0170:             messages.success(request, f"вњ… РќР°РїРѕРјРёРЅР°РЅРёРµ РѕС‚РїСЂР°РІР»РµРЅРѕ РґР»СЏ: {habit.action}")
0171:         except Exception as e:
0172:             messages.error(request, f"вќЊ РћС€РёР±РєР°: {str(e)}")
0173: 
0174:         return redirect("habits:notifications")
0175: 
0176: 
0177: class ToggleNotificationsView(LoginRequiredMixin, View):
0178:     """Р’РєР»СЋС‡РµРЅРёРµ/РІС‹РєР»СЋС‡РµРЅРёРµ СѓРІРµРґРѕРјР»РµРЅРёР№"""
0179: 
0180:     def post(self, request):
0181:         user = request.user
0182:         user.telegram_notifications = not user.telegram_notifications
0183:         user.save()
0184: 
0185:         status = "РІРєР»СЋС‡РµРЅС‹" if user.telegram_notifications else "РІС‹РєР»СЋС‡РµРЅС‹"
0186:         messages.success(request, f"рџ”” РЈРІРµРґРѕРјР»РµРЅРёСЏ {status}")
0187: 
0188:         return redirect("habits:notifications")

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\habits\__init__.py
================================================================================

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\management\commands\create_superuser.py
================================================================================
0001: import os
0002: 
0003: from django.core.management import BaseCommand
0004: from dotenv import load_dotenv
0005: 
0006: from ...models import User
0007: 
0008: load_dotenv(override=True)
0009: 
0010: 
0011: class Command(BaseCommand):
0012:     def handle(self, *args, **options):
0013:         user = User.objects.create_superuser(username=os.getenv("ADMIN_USERNAME"), email=os.getenv("ADMIN_EMAIL"))
0014: 
0015:         user.set_password(os.getenv("ADMIN_PASSWORD"))
0016:         user.is_active = True
0017:         user.is_staff = True
0018:         user.is_superuser = True
0019:         user.save()

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\management\commands\__init__.py
================================================================================

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\management\__init__.py
================================================================================

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\migrations\0001_initial.py
================================================================================
0001: # Generated by Django 5.2.6 on 2025-09-18 18:50
0002: 
0003: import django.contrib.auth.models
0004: import django.core.validators
0005: import django.utils.timezone
0006: import phonenumber_field.modelfields
0007: from django.db import migrations, models
0008: 
0009: 
0010: class Migration(migrations.Migration):
0011: 
0012:     initial = True
0013: 
0014:     dependencies = [
0015:         ("auth", "0012_alter_user_first_name_max_length"),
0016:     ]
0017: 
0018:     operations = [
0019:         migrations.CreateModel(
0020:             name="User",
0021:             fields=[
0022:                 ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
0023:                 ("password", models.CharField(max_length=128, verbose_name="password")),
0024:                 ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
0025:                 (
0026:                     "is_superuser",
0027:                     models.BooleanField(
0028:                         default=False,
0029:                         help_text="Designates that this user has all permissions without explicitly assigning them.",
0030:                         verbose_name="superuser status",
0031:                     ),
0032:                 ),
0033:                 ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
0034:                 ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
0035:                 (
0036:                     "is_staff",
0037:                     models.BooleanField(
0038:                         default=False,
0039:                         help_text="Designates whether the user can log into this admin site.",
0040:                         verbose_name="staff status",
0041:                     ),
0042:                 ),
0043:                 (
0044:                     "is_active",
0045:                     models.BooleanField(
0046:                         default=True,
0047:                         help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
0048:                         verbose_name="active",
0049:                     ),
0050:                 ),
0051:                 ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
0052:                 (
0053:                     "username",
0054:                     models.CharField(
0055:                         help_text="Р’РІРµРґРёС‚Рµ РёРјСЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ",
0056:                         max_length=50,
0057:                         unique=True,
0058:                         verbose_name="РРјСЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ",
0059:                     ),
0060:                 ),
0061:                 (
0062:                     "email",
0063:                     models.EmailField(
0064:                         help_text="Р’РІРµРґРёС‚Рµ Р°РґСЂРµСЃ СЌР»РµРєС‚СЂРѕРЅРЅРѕР№ РїРѕС‡С‚С‹", max_length=254, unique=True, verbose_name="email"
0065:                     ),
0066:                 ),
0067:                 (
0068:                     "country",
0069:                     models.CharField(
0070:                         blank=True, help_text="Р’РІРµРґРёС‚Рµ СЃС‚СЂР°РЅСѓ", max_length=50, null=True, verbose_name="РЎС‚СЂР°РЅР°"
0071:                     ),
0072:                 ),
0073:                 (
0074:                     "city",
0075:                     models.CharField(
0076:                         blank=True, help_text="Р’РІРµРґРёС‚Рµ РіРѕСЂРѕРґ", max_length=50, null=True, verbose_name="Р“РѕСЂРѕРґ"
0077:                     ),
0078:                 ),
0079:                 (
0080:                     "phone",
0081:                     phonenumber_field.modelfields.PhoneNumberField(
0082:                         blank=True,
0083:                         help_text="Р’РІРµРґРёС‚Рµ РЅРѕРјРµСЂ С‚РµР»РµС„РѕРЅР°",
0084:                         max_length=128,
0085:                         null=True,
0086:                         region=None,
0087:                         verbose_name="РўРµР»РµС„РѕРЅ",
0088:                     ),
0089:                 ),
0090:                 (
0091:                     "avatar",
0092:                     models.ImageField(
0093:                         blank=True,
0094:                         help_text="Р—Р°РіСЂСѓР·РёС‚Рµ РёР·РѕР±СЂР°Р¶РµРЅРёРµ Р°РІР°С‚Р°СЂР°",
0095:                         null=True,
0096:                         upload_to="user/avatars",
0097:                         validators=[
0098:                             django.core.validators.FileExtensionValidator(
0099:                                 allowed_extensions=["jfif", "jpg", "jpeg", "png"]
0100:                             )
0101:                         ],
0102:                         verbose_name="РђРІР°С‚Р°СЂ",
0103:                     ),
0104:                 ),
0105:                 ("token", models.CharField(blank=True, max_length=100, null=True, verbose_name="РўРѕРєРµРЅ")),
0106:                 ("is_verified", models.BooleanField(default=False, verbose_name="РџРѕРґС‚РІРµСЂР¶РґРµРЅ")),
0107:                 (
0108:                     "role",
0109:                     models.CharField(
0110:                         choices=[("user", "РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ"), ("manager", "РњРµРЅРµРґР¶РµСЂ"), ("moderator", "РњРѕРґРµСЂР°С‚РѕСЂ")],
0111:                         default="user",
0112:                         max_length=10,
0113:                         verbose_name="Р РѕР»СЊ",
0114:                     ),
0115:                 ),
0116:                 ("is_blocked", models.BooleanField(default=False, verbose_name="Р—Р°Р±Р»РѕРєРёСЂРѕРІР°РЅ")),
0117:                 (
0118:                     "groups",
0119:                     models.ManyToManyField(
0120:                         blank=True,
0121:                         help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
0122:                         related_name="user_set",
0123:                         related_query_name="user",
0124:                         to="auth.group",
0125:                         verbose_name="groups",
0126:                     ),
0127:                 ),
0128:                 (
0129:                     "user_permissions",
0130:                     models.ManyToManyField(
0131:                         blank=True,
0132:                         help_text="Specific permissions for this user.",
0133:                         related_name="user_set",
0134:                         related_query_name="user",
0135:                         to="auth.permission",
0136:                         verbose_name="user permissions",
0137:                     ),
0138:                 ),
0139:             ],
0140:             options={
0141:                 "verbose_name": "РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ",
0142:                 "verbose_name_plural": "РџРѕР»СЊР·РѕРІР°С‚РµР»Рё",
0143:                 "db_table": "user",
0144:                 "permissions": [
0145:                     ("block_user", "РњРѕР¶РµС‚ Р±Р»РѕРєРёСЂРѕРІР°С‚СЊ РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№"),
0146:                     ("disable_mailing", "РњРѕР¶РµС‚ РѕС‚РєР»СЋС‡Р°С‚СЊ СЂР°СЃСЃС‹Р»РєРё"),
0147:                 ],
0148:             },
0149:             managers=[
0150:                 ("objects", django.contrib.auth.models.UserManager()),
0151:             ],
0152:         ),
0153:     ]

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\migrations\0002_alter_user_role.py
================================================================================
0001: # Generated by Django 5.2.6 on 2025-09-18 19:10
0002: 
0003: from django.db import migrations, models
0004: 
0005: 
0006: class Migration(migrations.Migration):
0007: 
0008:     dependencies = [
0009:         ("user", "0001_initial"),
0010:     ]
0011: 
0012:     operations = [
0013:         migrations.AlterField(
0014:             model_name="user",
0015:             name="role",
0016:             field=models.CharField(
0017:                 choices=[("user", "РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ"), ("manager", "РњРµРЅРµРґР¶РµСЂ")],
0018:                 default="user",
0019:                 max_length=10,
0020:                 verbose_name="Р РѕР»СЊ",
0021:             ),
0022:         ),
0023:     ]

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\migrations\0003_user_telegram_chat_id_user_telegram_notifications_and_more.py
================================================================================
0001: # Generated by Django 5.2.6 on 2025-09-22 21:58
0002: 
0003: import django.db.models.deletion
0004: from django.conf import settings
0005: from django.db import migrations, models
0006: 
0007: 
0008: class Migration(migrations.Migration):
0009: 
0010:     dependencies = [
0011:         ("user", "0002_alter_user_role"),
0012:     ]
0013: 
0014:     operations = [
0015:         migrations.AddField(
0016:             model_name="user",
0017:             name="telegram_chat_id",
0018:             field=models.BigIntegerField(
0019:                 blank=True,
0020:                 help_text="РЈРЅРёРєР°Р»СЊРЅС‹Р№ РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂ С‡Р°С‚Р° РґР»СЏ Telegram СѓРІРµРґРѕРјР»РµРЅРёР№",
0021:                 null=True,
0022:                 unique=True,
0023:                 verbose_name="ID С‡Р°С‚Р° РІ Telegram",
0024:             ),
0025:         ),
0026:         migrations.AddField(
0027:             model_name="user",
0028:             name="telegram_notifications",
0029:             field=models.BooleanField(
0030:                 default=True, help_text="Р’РєР»СЋС‡РµРЅС‹ Р»Рё СѓРІРµРґРѕРјР»РµРЅРёСЏ РІ Telegram", verbose_name="Telegram СѓРІРµРґРѕРјР»РµРЅРёСЏ"
0031:             ),
0032:         ),
0033:         migrations.AddField(
0034:             model_name="user",
0035:             name="telegram_username",
0036:             field=models.CharField(blank=True, max_length=100, null=True, verbose_name="Username РІ Telegram"),
0037:         ),
0038:         migrations.CreateModel(
0039:             name="TelegramUser",
0040:             fields=[
0041:                 ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
0042:                 (
0043:                     "chat_id",
0044:                     models.BigIntegerField(
0045:                         help_text="РЈРЅРёРєР°Р»СЊРЅС‹Р№ РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂ С‡Р°С‚Р° СЃ РїРѕР»СЊР·РѕРІР°С‚РµР»РµРј",
0046:                         unique=True,
0047:                         verbose_name="ID С‡Р°С‚Р° РІ Telegram",
0048:                     ),
0049:                 ),
0050:                 (
0051:                     "username",
0052:                     models.CharField(blank=True, max_length=100, null=True, verbose_name="Username РІ Telegram"),
0053:                 ),
0054:                 ("is_active", models.BooleanField(default=True, verbose_name="РђРєС‚РёРІРµРЅ")),
0055:                 ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Р”Р°С‚Р° РїРѕРґРєР»СЋС‡РµРЅРёСЏ")),
0056:                 (
0057:                     "user",
0058:                     models.OneToOneField(
0059:                         on_delete=django.db.models.deletion.CASCADE,
0060:                         related_name="telegram",
0061:                         to=settings.AUTH_USER_MODEL,
0062:                         verbose_name="РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ",
0063:                     ),
0064:                 ),
0065:             ],
0066:             options={
0067:                 "verbose_name": "Telegram РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ",
0068:                 "verbose_name_plural": "Telegram РїРѕР»СЊР·РѕРІР°С‚РµР»Рё",
0069:             },
0070:         ),
0071:     ]

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\migrations\__init__.py
================================================================================

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\admin.py
================================================================================
0001: from django.contrib import admin
0002: from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
0003: from django.utils.translation import gettext_lazy as _
0004: 
0005: from .models import User
0006: 
0007: 
0008: class UserAdmin(BaseUserAdmin):
0009:     list_display = ("id", "username", "email", "role", "is_blocked", "is_staff", "is_superuser")
0010:     list_filter = ("role", "is_blocked", "is_staff", "is_superuser")
0011:     search_fields = ("username", "email")
0012:     ordering = ("username",)
0013: 
0014:     fieldsets = (
0015:         (None, {"fields": ("username", "password")}),
0016:         (_("Personal info"), {"fields": ("email", "country", "phone", "avatar")}),
0017:         (_("Telegram settings"), {"fields": ("telegram_chat_id", "telegram_username", "telegram_notifications")}),
0018:         (
0019:             _("Permissions"),
0020:             {
0021:                 "fields": (
0022:                     "is_active",
0023:                     "is_blocked",
0024:                     "is_verified",
0025:                     "is_staff",
0026:                     "is_superuser",
0027:                     "role",
0028:                     "groups",
0029:                     "user_permissions",
0030:                 ),
0031:             },
0032:         ),
0033:         (_("Important dates"), {"fields": ("last_login", "date_joined")}),
0034:     )
0035: 
0036:     add_fieldsets = (
0037:         (
0038:             None,
0039:             {
0040:                 "classes": ("wide",),
0041:                 "fields": ("username", "email", "password1", "password2", "role"),
0042:             },
0043:         ),
0044:     )
0045: 
0046:     actions = ["block_users", "unblock_users", "make_managers", "make_regular_users"]
0047: 
0048:     def block_users(self, request, queryset):
0049:         queryset.update(is_blocked=True)
0050:         self.message_user(request, "Р’С‹Р±СЂР°РЅРЅС‹Рµ РїРѕР»СЊР·РѕРІР°С‚РµР»Рё Р·Р°Р±Р»РѕРєРёСЂРѕРІР°РЅС‹")
0051: 
0052:     block_users.short_description = "Р—Р°Р±Р»РѕРєРёСЂРѕРІР°С‚СЊ РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№"
0053: 
0054:     def unblock_users(self, request, queryset):
0055:         queryset.update(is_blocked=False)
0056:         self.message_user(request, "Р’С‹Р±СЂР°РЅРЅС‹Рµ РїРѕР»СЊР·РѕРІР°С‚РµР»Рё СЂР°Р·Р±Р»РѕРєРёСЂРѕРІР°РЅС‹")
0057: 
0058:     unblock_users.short_description = "Р Р°Р·Р±Р»РѕРєРёСЂРѕРІР°С‚СЊ РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№"
0059: 
0060:     def make_managers(self, request, queryset):
0061:         queryset.update(role="manager")
0062:         self.message_user(request, "Р’С‹Р±СЂР°РЅРЅС‹Рµ РїРѕР»СЊР·РѕРІР°С‚РµР»Рё СЃС‚Р°Р»Рё РјРµРЅРµРґР¶РµСЂР°РјРё")
0063: 
0064:     make_managers.short_description = "РЎРґРµР»Р°С‚СЊ РјРµРЅРµРґР¶РµСЂР°РјРё"
0065: 
0066:     def make_regular_users(self, request, queryset):
0067:         queryset.update(role="user")
0068:         self.message_user(request, "Р’С‹Р±СЂР°РЅРЅС‹Рµ РїРѕР»СЊР·РѕРІР°С‚РµР»Рё СЃС‚Р°Р»Рё РѕР±С‹С‡РЅС‹РјРё РїРѕР»СЊР·РѕРІР°С‚РµР»СЏРјРё")
0069: 
0070:     make_regular_users.short_description = "РЎРґРµР»Р°С‚СЊ РѕР±С‹С‡РЅС‹РјРё РїРѕР»СЊР·РѕРІР°С‚РµР»СЏРјРё"
0071: 
0072: 
0073: admin.site.register(User, UserAdmin)

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\apps.py
================================================================================
0001: from django.apps import AppConfig
0002: 
0003: 
0004: class UserConfig(AppConfig):
0005:     default_auto_field = "django.db.models.BigAutoField"
0006:     name = "user"

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\forms.py
================================================================================
0001: from django import forms
0002: from django.conf import settings
0003: from django.contrib.auth.forms import PasswordResetForm, UserCreationForm
0004: from django.core.exceptions import ValidationError
0005: from django.core.mail import send_mail
0006: from django.template import loader
0007: 
0008: from .models import User
0009: 
0010: 
0011: class UserRegistrationForm(UserCreationForm):
0012:     email = forms.EmailField(required=True)
0013: 
0014:     def clean_email(self):
0015:         email = self.cleaned_data["email"]
0016:         if User.objects.filter(email=email).exists():
0017:             raise ValidationError("РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ СЃ С‚Р°РєРёРј email СѓР¶Рµ СЃСѓС‰РµСЃС‚РІСѓРµС‚.")
0018:         return email
0019: 
0020:     def clean_username(self):
0021:         username = self.cleaned_data["username"]
0022:         if User.objects.filter(username=username).exists():
0023:             raise ValidationError("РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ СЃ С‚Р°РєРёРј РёРјРµРЅРµРј СѓР¶Рµ СЃСѓС‰РµСЃС‚РІСѓРµС‚")
0024:         return username
0025: 
0026:     class Meta:
0027:         model = User
0028:         fields = (
0029:             "username",
0030:             "email",
0031:             "country",
0032:             "phone",
0033:             "avatar",
0034:             "password1",
0035:             "password2",
0036:         )
0037: 
0038: 
0039: class UserProfileForm(forms.ModelForm):
0040:     class Meta:
0041:         model = User
0042:         fields = ("username", "email", "country", "phone", "avatar")
0043: 
0044:     def __init__(self, *args, **kwargs):
0045:         super().__init__(*args, **kwargs)
0046:         self.fields["username"].disabled = True  # РРјСЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РЅРµР»СЊР·СЏ РјРµРЅСЏС‚СЊ
0047:         self.fields["email"].disabled = True  # Email С‚РѕР¶Рµ РЅРµР»СЊР·СЏ РјРµРЅСЏС‚СЊ
0048: 
0049: 
0050: class CustomPasswordResetForm(PasswordResetForm):
0051:     def send_mail(
0052:         self, subject_template_name, email_template_name, context, from_email, to_email, html_email_template_name=None
0053:     ):
0054:         """
0055:         РљР°СЃС‚РѕРјРЅР°СЏ РѕС‚РїСЂР°РІРєР° РїРёСЃСЊРјР° РґР»СЏ СЃР±СЂРѕСЃР° РїР°СЂРѕР»СЏ
0056:         """
0057:         subject = loader.render_to_string(subject_template_name, context)
0058:         # РЈР±РёСЂР°РµРј РїРµСЂРµРЅРѕСЃС‹ СЃС‚СЂРѕРє РІ subject
0059:         subject = "".join(subject.splitlines())
0060:         body = loader.render_to_string(email_template_name, context)
0061: 
0062:         send_mail(
0063:             subject=subject,
0064:             message=body,
0065:             from_email=settings.EMAIL_HOST_USER,  # РСЃРїРѕР»СЊР·СѓРµРј email РёР· РЅР°СЃС‚СЂРѕРµРє
0066:             recipient_list=[to_email],
0067:             fail_silently=False,
0068:         )

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\mixins.py
================================================================================
0001: from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin
0002: from django.core.exceptions import PermissionDenied
0003: 
0004: # class ManagerRequiredMixin:
0005: #     """РўРѕР»СЊРєРѕ РґР»СЏ РјРµРЅРµРґР¶РµСЂРѕРІ (role='manager')"""
0006: #
0007: #     def dispatch(self, request, *args, **kwargs):
0008: #         if not request.user.is_authenticated or request.user.role != "manager":
0009: #             raise PermissionDenied("Р”РѕСЃС‚СѓРї С‚РѕР»СЊРєРѕ РґР»СЏ РјРµРЅРµРґР¶РµСЂРѕРІ")
0010: #         return super().dispatch(request, *args, **kwargs)
0011: 
0012: 
0013: class UserAccessMixin:
0014:     """РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ РјРѕР¶РµС‚ СЂР°Р±РѕС‚Р°С‚СЊ С‚РѕР»СЊРєРѕ СЃРѕ СЃРІРѕРёРјРё РѕР±СЉРµРєС‚Р°РјРё"""
0015: 
0016:     def get_object(self, queryset=None):
0017:         # РЇРІРЅРѕ РїРѕР»СѓС‡Р°РµРј РѕР±СЉРµРєС‚
0018:         obj = super().get_object(queryset) if queryset else super().get_object()
0019:         return obj
0020: 
0021:     def dispatch(self, request, *args, **kwargs):
0022:         obj = self.get_object()
0023:         if not request.user.is_authenticated or (obj.owner != request.user and request.user.role != "manager"):
0024:             raise PermissionDenied("РќРµС‚ РґРѕСЃС‚СѓРїР° Рє СЌС‚РѕРјСѓ РѕР±СЉРµРєС‚Сѓ")
0025:         return super().dispatch(request, *args, **kwargs)
0026: 
0027: 
0028: class ManagerRequiredMixin(LoginRequiredMixin, UserPassesTestMixin):
0029:     """РњРёРєСЃРёРЅ С‚РѕР»СЊРєРѕ РґР»СЏ РјРµРЅРµРґР¶РµСЂРѕРІ Рё Р°РґРјРёРЅРѕРІ"""
0030: 
0031:     def test_func(self):
0032:         return self.request.user.role == "manager" or self.request.user.is_staff

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\models.py
================================================================================
0001: from django.contrib.auth.models import AbstractUser
0002: from django.core.validators import FileExtensionValidator
0003: from django.db import models
0004: from phonenumber_field.modelfields import PhoneNumberField
0005: 
0006: from config import settings
0007: 
0008: 
0009: class User(AbstractUser):
0010:     username = models.CharField(
0011:         max_length=50,
0012:         unique=True,
0013:         verbose_name="РРјСЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ",
0014:         help_text="Р’РІРµРґРёС‚Рµ РёРјСЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ",
0015:     )
0016:     email = models.EmailField(
0017:         unique=True,
0018:         blank=False,
0019:         null=False,
0020:         verbose_name="email",
0021:         help_text="Р’РІРµРґРёС‚Рµ Р°РґСЂРµСЃ СЌР»РµРєС‚СЂРѕРЅРЅРѕР№ РїРѕС‡С‚С‹",
0022:     )
0023:     country = models.CharField(
0024:         max_length=50,
0025:         blank=True,
0026:         null=True,
0027:         verbose_name="РЎС‚СЂР°РЅР°",
0028:         help_text="Р’РІРµРґРёС‚Рµ СЃС‚СЂР°РЅСѓ",
0029:     )
0030: 
0031:     city = models.CharField(
0032:         max_length=50,
0033:         blank=True,
0034:         null=True,
0035:         verbose_name="Р“РѕСЂРѕРґ",
0036:         help_text="Р’РІРµРґРёС‚Рµ РіРѕСЂРѕРґ",
0037:     )
0038: 
0039:     phone = PhoneNumberField(
0040:         blank=True,
0041:         null=True,
0042:         verbose_name="РўРµР»РµС„РѕРЅ",
0043:         help_text="Р’РІРµРґРёС‚Рµ РЅРѕРјРµСЂ С‚РµР»РµС„РѕРЅР°",
0044:     )
0045: 
0046:     avatar = models.ImageField(
0047:         upload_to="user/avatars",
0048:         blank=True,
0049:         null=True,
0050:         validators=[FileExtensionValidator(allowed_extensions=["jfif", "jpg", "jpeg", "png"])],
0051:         verbose_name="РђРІР°С‚Р°СЂ",
0052:         help_text="Р—Р°РіСЂСѓР·РёС‚Рµ РёР·РѕР±СЂР°Р¶РµРЅРёРµ Р°РІР°С‚Р°СЂР°",
0053:     )
0054:     token = models.CharField(max_length=100, verbose_name="РўРѕРєРµРЅ", blank=True, null=True)
0055:     is_verified = models.BooleanField(default=False, verbose_name="РџРѕРґС‚РІРµСЂР¶РґРµРЅ")
0056: 
0057:     USERNAME_FIELD = "email"
0058:     REQUIRED_FIELDS = [
0059:         "username",
0060:     ]
0061: 
0062:     telegram_chat_id = models.BigIntegerField(
0063:         blank=True,
0064:         null=True,
0065:         unique=True,
0066:         verbose_name="ID С‡Р°С‚Р° РІ Telegram",
0067:         help_text="РЈРЅРёРєР°Р»СЊРЅС‹Р№ РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂ С‡Р°С‚Р° РґР»СЏ Telegram СѓРІРµРґРѕРјР»РµРЅРёР№",
0068:     )
0069:     telegram_username = models.CharField(max_length=100, blank=True, null=True, verbose_name="Username РІ Telegram")
0070:     telegram_notifications = models.BooleanField(
0071:         default=True, verbose_name="Telegram СѓРІРµРґРѕРјР»РµРЅРёСЏ", help_text="Р’РєР»СЋС‡РµРЅС‹ Р»Рё СѓРІРµРґРѕРјР»РµРЅРёСЏ РІ Telegram"
0072:     )
0073: 
0074:     ROLES = (("user", "РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ"), ("manager", "РњРµРЅРµРґР¶РµСЂ"))
0075:     role = models.CharField(max_length=10, choices=ROLES, default="user", verbose_name="Р РѕР»СЊ")
0076:     is_blocked = models.BooleanField(default=False, verbose_name="Р—Р°Р±Р»РѕРєРёСЂРѕРІР°РЅ")
0077: 
0078:     def __str__(self):
0079:         return self.username
0080: 
0081:     class Meta:
0082:         verbose_name = "РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ"
0083:         verbose_name_plural = "РџРѕР»СЊР·РѕРІР°С‚РµР»Рё"
0084:         db_table = "user"
0085:         permissions = [
0086:             ("block_user", "РњРѕР¶РµС‚ Р±Р»РѕРєРёСЂРѕРІР°С‚СЊ РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№"),
0087:             ("disable_mailing", "РњРѕР¶РµС‚ РѕС‚РєР»СЋС‡Р°С‚СЊ СЂР°СЃСЃС‹Р»РєРё"),
0088:         ]
0089: 
0090: 
0091: class TelegramUser(models.Model):
0092:     """РњРѕРґРµР»СЊ РґР»СЏ С…СЂР°РЅРµРЅРёСЏ Telegram РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№"""
0093: 
0094:     user = models.OneToOneField(
0095:         settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="telegram", verbose_name="РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ"
0096:     )
0097:     chat_id = models.BigIntegerField(
0098:         unique=True, verbose_name="ID С‡Р°С‚Р° РІ Telegram", help_text="РЈРЅРёРєР°Р»СЊРЅС‹Р№ РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂ С‡Р°С‚Р° СЃ РїРѕР»СЊР·РѕРІР°С‚РµР»РµРј"
0099:     )
0100:     username = models.CharField(max_length=100, blank=True, null=True, verbose_name="Username РІ Telegram")
0101:     is_active = models.BooleanField(default=True, verbose_name="РђРєС‚РёРІРµРЅ")
0102:     created_at = models.DateTimeField(auto_now_add=True, verbose_name="Р”Р°С‚Р° РїРѕРґРєР»СЋС‡РµРЅРёСЏ")
0103: 
0104:     class Meta:
0105:         verbose_name = "Telegram РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ"
0106:         verbose_name_plural = "Telegram РїРѕР»СЊР·РѕРІР°С‚РµР»Рё"
0107: 
0108:     def __str__(self):
0109:         return f"{self.user.username} ({self.chat_id})"

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\permissions.py
================================================================================
0001: from rest_framework import permissions
0002: 
0003: 
0004: class CanEditUserProfile(permissions.BasePermission):
0005:     """
0006:     Р Р°Р·СЂРµС€РµРЅРёРµ РґР»СЏ СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРёСЏ РїСЂРѕС„РёР»СЏ:
0007:     - Р’Р»Р°РґРµР»РµС† РјРѕР¶РµС‚ СЂРµРґР°РєС‚РёСЂРѕРІР°С‚СЊ СЃРІРѕР№ РїСЂРѕС„РёР»СЊ
0008:     - РњРµРЅРµРґР¶РµСЂ РјРѕР¶РµС‚ СЂРµРґР°РєС‚РёСЂРѕРІР°С‚СЊ Р»СЋР±РѕР№ РїСЂРѕС„РёР»СЊ
0009:     - РђРґРјРёРЅ РјРѕР¶РµС‚ СЂРµРґР°РєС‚РёСЂРѕРІР°С‚СЊ Р»СЋР±РѕР№ РїСЂРѕС„РёР»СЊ
0010:     """
0011: 
0012:     def has_object_permission(self, request, view, obj):
0013:         """РќР°СЃС‚СЂРѕР№РєР° РїСЂР°РІ РґРѕСЃС‚СѓРїР° РґР»СЏ СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРёСЏ РїСЂРѕС„РёР»СЏ"""
0014:         # Р’Р»Р°РґРµР»РµС† РІСЃРµРіРґР° РјРѕР¶РµС‚ СЂРµРґР°РєС‚РёСЂРѕРІР°С‚СЊ
0015:         if obj == request.user:
0016:             return True
0017: 
0018:         # РџСЂРѕРІРµСЂСЏРµРј РїСЂР°РІР° РјРµРЅРµРґР¶РµСЂР°/Р°РґРјРёРЅР°
0019:         user_role = getattr(request.user, "role", None)
0020:         is_manager = user_role == "manager"
0021:         is_admin = request.user.is_staff
0022: 
0023:         return is_manager or is_admin
0024: 
0025: 
0026: class CanViewUserList(permissions.BasePermission):
0027:     """
0028:     Р Р°Р·СЂРµС€РµРЅРёРµ РґР»СЏ РїСЂРѕСЃРјРѕС‚СЂР° СЃРїРёСЃРєР° РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№:
0029:     - РўРѕР»СЊРєРѕ РјРµРЅРµРґР¶РµСЂС‹ Рё Р°РґРјРёРЅС‹
0030:     """
0031: 
0032:     def has_permission(self, request, view):
0033:         """РќР°СЃС‚СЂРѕР№РєР° РїСЂР°РІ РґРѕСЃС‚СѓРїР° РґР»СЏ РїСЂРѕСЃРјРѕС‚СЂР° СЃРїРёСЃРєР° РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№"""
0034:         is_manager = request.user.role == "manager"
0035:         is_admin = request.user.is_staff
0036: 
0037:         return is_manager or is_admin

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\serializers.py
================================================================================
0001: from rest_framework import serializers
0002: 
0003: from .models import User
0004: 
0005: 
0006: class UserPublicProfileSerializer(serializers.ModelSerializer):
0007:     """РЎРµСЂРёР°Р»РёР·Р°С‚РѕСЂ РґР»СЏ РїСѓР±Р»РёС‡РЅРѕРіРѕ РїСЂРѕСЃРјРѕС‚СЂР° (РѕРіСЂР°РЅРёС‡РµРЅРЅС‹Рµ РґР°РЅРЅС‹Рµ)"""
0008: 
0009:     class Meta:
0010:         model = User
0011:         fields = ["id", "username", "email", "first_name", "country", "city", "phone", "avatar", "role"]
0012:         read_only_fields = ["id", "email", "role"]
0013: 
0014: 
0015: class UserPrivateProfileSerializer(serializers.ModelSerializer):
0016:     """РЎРµСЂРёР°Р»РёР·Р°С‚РѕСЂ РґР»СЏ РїСЂРёРІР°С‚РЅРѕРіРѕ РїСЂРѕСЃРјРѕС‚СЂР° (РІСЃРµ РґР°РЅРЅС‹Рµ)"""
0017: 
0018:     class Meta:
0019:         model = User
0020:         fields = [
0021:             "id",
0022:             "username",
0023:             "email",
0024:             "first_name",
0025:             "last_name",
0026:             "country",
0027:             "city",
0028:             "phone",
0029:             "avatar",
0030:             "role",
0031:             "is_blocked",
0032:             "is_verified",
0033:             "date_joined",
0034:         ]
0035:         read_only_fields = ["id", "email", "role", "is_blocked", "is_verified", "date_joined"]
0036: 
0037: 
0038: class UserApiRegistrationSerializer(serializers.ModelSerializer):
0039:     class Meta:
0040:         model = User
0041:         fields = [
0042:             "username",
0043:             "email",
0044:             "password",
0045:             "first_name",
0046:             "last_name",
0047:             "country",
0048:             "city",
0049:             "phone",
0050:             "avatar",
0051:         ]
0052: 
0053:     def validate_username(self, value):
0054:         """РџСЂРѕРІРµСЂРєР° СѓРЅРёРєР°Р»СЊРЅРѕСЃС‚Рё username"""
0055:         if User.objects.filter(username=value).exclude(id=self.instance.id if self.instance else None).exists():
0056:             raise serializers.ValidationError("РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ СЃ С‚Р°РєРёРј РёРјРµРЅРµРј СѓР¶Рµ СЃСѓС‰РµСЃС‚РІСѓРµС‚.")
0057:         return value

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\tests.py
================================================================================
0001: from django.test import TestCase
0002: 
0003: # Create your tests here.

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\urls.py
================================================================================
0001: from django.contrib.auth import views as auth_views
0002: from django.contrib.auth.views import LoginView
0003: from django.urls import path, reverse_lazy
0004: from rest_framework.permissions import AllowAny
0005: from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
0006: 
0007: from .forms import CustomPasswordResetForm
0008: from .views import (
0009:     CustomLogoutView,
0010:     UserCreateApiView,
0011:     UserListAPIView,
0012:     UserListHTMLView,
0013:     UserListView,
0014:     UserProfileRetrieveAPIView,
0015:     UserProfileUpdateAPIView,
0016:     UserProfileUpdateView,
0017:     UserRegisterView,
0018:     email_verification,
0019:     toggle_user_block
0020: )
0021: 
0022: app_name = "user"
0023: 
0024: urlpatterns = [
0025:     path("login/", LoginView.as_view(template_name="user/login.html"), name="login"),
0026:     path("logout/", CustomLogoutView.as_view(), name="logout"),
0027:     path("register/", UserRegisterView.as_view(template_name="user/registration.html"), name="register"),
0028:     path("profile/edit/", UserProfileUpdateView.as_view(), name="profile_edit"),
0029:     path("email-confirm/<str:token>/", email_verification, name="email_verification"),
0030:     path(
0031:         "password_reset/",
0032:         auth_views.PasswordResetView.as_view(
0033:             form_class=CustomPasswordResetForm,
0034:             template_name="user/password_reset.html",
0035:             email_template_name="user/password_reset_email.html",
0036:             subject_template_name="user/password_reset_subject.txt",
0037:             success_url=reverse_lazy("user:password_reset_done"),
0038:         ),
0039:         name="password_reset",
0040:     ),
0041:     path(
0042:         "password_reset/done/",
0043:         auth_views.PasswordResetDoneView.as_view(
0044:             template_name="user/password_reset_done.html",
0045:         ),
0046:         name="password_reset_done",
0047:     ),
0048:     path(
0049:         "reset/<uidb64>/<token>/",
0050:         auth_views.PasswordResetConfirmView.as_view(
0051:             template_name="user/password_reset_confirm.html",
0052:             success_url=reverse_lazy("user:password_reset_complete"),
0053:         ),
0054:         name="password_reset_confirm",
0055:     ),
0056:     path(
0057:         "reset/done/",
0058:         auth_views.PasswordResetCompleteView.as_view(
0059:             template_name="user/password_reset_complete.html",
0060:         ),
0061:         name="password_reset_complete",
0062:     ),
0063:     path("manager/user/", UserListView.as_view(), name="user_list"),
0064:     path("manager/user/toggle_block/<int:user_id>/", toggle_user_block, name="toggle_user_block"),
0065:     path("api/user/", UserListAPIView.as_view(), name="api_user_list"),
0066:     path("api/my-profile/", UserProfileRetrieveAPIView.as_view(), name="api_my_profile"),
0067:     path("api/my-profile/update/", UserProfileUpdateAPIView.as_view(), name="api_my_profile_update"),
0068:     path("api/profile/<int:pk>/", UserProfileRetrieveAPIView.as_view(), name="api_profile_detail"),
0069:     path("api/profile/<int:pk>/update/", UserProfileUpdateAPIView.as_view(), name="api_profile_update_detail"),
0070:     path("manager/user/html/", UserListHTMLView.as_view(), name="user_list_html"),
0071:     path("api/login/", TokenObtainPairView.as_view(permission_classes=(AllowAny,)), name="token_obtain_pair"),
0072:     path("api/token/refresh/", TokenRefreshView.as_view(permission_classes=(AllowAny,)), name="token_refresh"),
0073:     path("api/register/", UserCreateApiView.as_view(), name="user_api_register"),
0074: ]

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\views.py
================================================================================
0001: import secrets
0002: 
0003: from django.conf import settings
0004: from django.contrib import messages
0005: from django.contrib.auth import get_user_model, login
0006: from django.contrib.auth.mixins import LoginRequiredMixin
0007: from django.contrib.auth.views import LogoutView
0008: from django.core.exceptions import PermissionDenied
0009: from django.core.mail import send_mail
0010: from django.shortcuts import get_object_or_404, redirect
0011: from django.urls import reverse_lazy
0012: from django.utils.decorators import method_decorator
0013: from django.views.decorators.cache import cache_page
0014: from django.views.generic import CreateView, ListView, TemplateView, UpdateView
0015: from rest_framework import generics, permissions, status
0016: from rest_framework.exceptions import PermissionDenied as DRFPermissionDenied
0017: from rest_framework.filters import OrderingFilter
0018: from rest_framework.response import Response
0019: 
0020: from .forms import UserProfileForm, UserRegistrationForm
0021: from .mixins import ManagerRequiredMixin
0022: from .models import User
0023: from .permissions import CanEditUserProfile, CanViewUserList
0024: from .serializers import UserApiRegistrationSerializer, UserPrivateProfileSerializer, UserPublicProfileSerializer
0025: 
0026: 
0027: class CustomLogoutView(LogoutView):
0028:     next_page = reverse_lazy("home")
0029: 
0030: 
0031: class UserRegisterView(CreateView):
0032:     model = User
0033:     form_class = UserRegistrationForm
0034:     template_name = "user/registration.html"
0035:     success_url = reverse_lazy("home")
0036: 
0037:     def form_valid(self, form):
0038: 
0039:         user = form.save()
0040:         user.is_active = False
0041:         token = secrets.token_hex(16)
0042:         user.token = token
0043:         user.save()
0044:         host = self.request.get_host()
0045:         url = f"http://{host}/user/email-confirm/{token}/"
0046:         send_mail(
0047:             subject="РџРѕРґС‚РІРµСЂР¶РґРµРЅРёРµ РїРѕС‡С‚С‹",
0048:             message=f"""Р—РґСЂР°РІСЃС‚РІСѓР№С‚Рµ {user.username}.
0049: РџРѕР¶Р°Р»СѓР№СЃС‚Р°, РїРѕРґС‚РІРµСЂРґРёС‚Рµ Р’Р°С€ Р°РґСЂРµСЃ СЌР»РµРєС‚СЂРѕРЅРЅРѕР№ РїРѕС‡С‚С‹ РґР»СЏ Р·Р°РІРµСЂС€РµРЅРёСЏ СЂРµРіРёСЃС‚СЂР°С†РёРё.
0050: РґР»СЏ СЌС‚РѕРіРѕ РїРµСЂРµР№РґРёС‚Рµ РїРѕ СЃСЃС‹Р»РєРµ {url}""",
0051:             from_email=settings.EMAIL_HOST_USER,
0052:             recipient_list=[user.email],
0053:         )
0054:         response = super().form_valid(form)
0055:         login(self.request, user)
0056:         messages.success(self.request, "Р РµРіРёСЃС‚СЂР°С†РёСЏ РїСЂРѕС€Р»Р° СѓСЃРїРµС€РЅРѕ!")
0057:         return response
0058: 
0059:     def form_invalid(self, form):
0060:         messages.error(self.request, "РџРѕР¶Р°Р»СѓР№СЃС‚Р°, РёСЃРїСЂР°РІСЊС‚Рµ РѕС€РёР±РєРё РІ С„РѕСЂРјРµ")
0061:         return super().form_invalid(form)
0062: 
0063: 
0064: class UserProfileUpdateView(LoginRequiredMixin, UpdateView):
0065:     model = User
0066:     form_class = UserProfileForm
0067:     template_name = "user/profile_edit.html"
0068:     success_url = reverse_lazy("user:profile_edit")
0069: 
0070:     def get_object(self, queryset=None):
0071:         return self.request.user  # Р РµРґР°РєС‚РёСЂСѓРµРј С‚РµРєСѓС‰РµРіРѕ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
0072: 
0073: 
0074: def email_verification(request, token):
0075:     user = get_object_or_404(User, token=token)
0076:     user.is_active = True
0077:     user.is_verified = True
0078:     user.token = None
0079:     user.save()
0080: 
0081:     # РђРІС‚РѕРјР°С‚РёС‡РµСЃРєРё Р°РІС‚РѕСЂРёР·СѓРµРј РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
0082:     login(request, user)
0083: 
0084:     # Р”РѕР±Р°РІР»СЏРµРј СЃРѕРѕР±С‰РµРЅРёРµ РѕР± СѓСЃРїРµС…Рµ
0085:     messages.success(request, "Р’Р°С€ email СѓСЃРїРµС€РЅРѕ РїРѕРґС‚РІРµСЂР¶РґРµРЅ!")
0086: 
0087:     # Р РµРґРёСЂРµРєС‚ РЅР° СЃС‚СЂР°РЅРёС†Сѓ РїСЂРѕС„РёР»СЏ
0088:     return redirect("user:profile_edit")
0089: 
0090: 
0091: # РЎРїРёСЃРѕРє РІСЃРµС… РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№ (С‚РѕР»СЊРєРѕ РґР»СЏ РјРµРЅРµРґР¶РµСЂРѕРІ)
0092: @method_decorator(cache_page(60 * 10), name="dispatch")
0093: class UserListView(ManagerRequiredMixin, ListView):
0094:     model = User
0095:     template_name = "user/user_list.html"
0096:     context_object_name = "user"
0097: 
0098: 
0099: # Р‘Р»РѕРєРёСЂРѕРІРєР°/СЂР°Р·Р±Р»РѕРєРёСЂРѕРІРєР° РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№
0100: def toggle_user_block(request, user_id):
0101:     if request.user.role != "manager":
0102:         raise PermissionDenied
0103: 
0104:     user = get_object_or_404(User, id=user_id)
0105:     user.is_blocked = not user.is_blocked
0106:     user.save()
0107:     messages.success(request, f"РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ {user.email} {'Р·Р°Р±Р»РѕРєРёСЂРѕРІР°РЅ' if user.is_blocked else 'СЂР°Р·Р±Р»РѕРєРёСЂРѕРІР°РЅ'}")
0108:     return redirect("user:user_list")
0109: 
0110: 
0111: class UserListHTMLView(ManagerRequiredMixin, TemplateView):
0112:     """HTML СЃС‚СЂР°РЅРёС†Р° СЃРїРёСЃРєР° РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№"""
0113: 
0114:     template_name = "user/user_list_api.html"
0115: 
0116:     def get_context_data(self, **kwargs):
0117:         context = super().get_context_data(**kwargs)
0118:         context["users"] = User.objects.all().order_by("-date_joined")
0119:         return context
0120: 
0121: 
0122: class UserCreateApiView(generics.CreateAPIView):
0123:     serializer_class = UserApiRegistrationSerializer
0124:     queryset = User.objects.all()
0125:     permission_classes = (permissions.AllowAny,)
0126: 
0127:     def perform_create(self, serializer):
0128:         user = serializer.save(is_active=True)
0129:         user.set_password(user.password)
0130:         user.save()
0131: 
0132: 
0133: class UserProfileUpdateAPIView(generics.UpdateAPIView):
0134:     """
0135:     Р­РЅРґРїРѕРёРЅС‚ РґР»СЏ СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРёСЏ РїСЂРѕС„РёР»СЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
0136:     Р”РѕСЃС‚СѓРї: РІР»Р°РґРµР»РµС†, РјРµРЅРµРґР¶РµСЂ РёР»Рё Р°РґРјРёРЅ
0137:     """
0138: 
0139:     serializer_class = UserPrivateProfileSerializer
0140:     permission_classes = [permissions.IsAuthenticated, CanEditUserProfile]
0141: 
0142:     def get_object(self):
0143:         """Р’С‹Р·С‹РІР°РµРј РїСЂРѕРІРµСЂРєСѓ РїСЂР°РІ РґР»СЏ РѕР±СЉРµРєС‚Р°"""
0144:         user_id = self.kwargs.get("pk")
0145:         if user_id:
0146:             user = generics.get_object_or_404(User, pk=user_id)
0147: 
0148:             # РЇРІРЅРѕ РІС‹Р·С‹РІР°РµРј РїСЂРѕРІРµСЂРєСѓ РїСЂР°РІ РґР»СЏ РѕР±СЉРµРєС‚Р°
0149:             self.check_object_permissions(self.request, user)
0150:             return user
0151:         return self.request.user
0152: 
0153:     def check_object_permissions(self, request, obj):
0154:         """Р’С‹Р·С‹РІР°РµРј РїСЂРѕРІРµСЂРєСѓ РІСЃРµС… permission РєР»Р°СЃСЃРѕРІ РґР»СЏ РѕР±СЉРµРєС‚Р°"""
0155: 
0156:         for permission in self.get_permissions():
0157:             if not permission.has_object_permission(request, self, obj):
0158:                 from rest_framework.exceptions import PermissionDenied
0159: 
0160:                 raise PermissionDenied("РќРµРґРѕСЃС‚Р°С‚РѕС‡РЅРѕ РїСЂР°РІ РґР»СЏ СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРёСЏ СЌС‚РѕРіРѕ РїСЂРѕС„РёР»СЏ")
0161: 
0162: 
0163: class UserProfileRetrieveAPIView(generics.RetrieveAPIView):
0164:     """
0165:     Р­РЅРґРїРѕРёРЅС‚ РґР»СЏ РїСЂРѕСЃРјРѕС‚СЂР° РїСЂРѕС„РёР»СЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
0166:     - Р’Р»Р°РґРµР»РµС†: РІСЃРµ РґР°РЅРЅС‹Рµ
0167:     - РњРµРЅРµРґР¶РµСЂ/РђРґРјРёРЅ: РІСЃРµ РґР°РЅРЅС‹Рµ Р»СЋР±РѕРіРѕ РїСЂРѕС„РёР»СЏ
0168:     - РћР±С‹С‡РЅС‹Р№ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ: С‚РѕР»СЊРєРѕ РїСѓР±Р»РёС‡РЅС‹Рµ РґР°РЅРЅС‹Рµ С‡СѓР¶РѕРіРѕ РїСЂРѕС„РёР»СЏ
0169:     """
0170: 
0171:     permission_classes = [permissions.IsAuthenticated]
0172: 
0173:     def get_serializer_class(self):
0174:         target_user = self.get_object()
0175:         current_user = self.request.user
0176: 
0177:         # Р’Р»Р°РґРµР»РµС† РІРёРґРёС‚ РІСЃРµ СЃРІРѕРё РґР°РЅРЅС‹Рµ
0178:         if target_user == current_user:
0179:             return UserPrivateProfileSerializer
0180: 
0181:         # РњРµРЅРµРґР¶РµСЂ/РђРґРјРёРЅ РІРёРґРёС‚ РІСЃРµ РґР°РЅРЅС‹Рµ Р»СЋР±РѕРіРѕ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
0182:         is_manager = getattr(current_user, "role", None) == "manager"
0183:         is_admin = current_user.is_staff
0184:         if is_manager or is_admin:
0185:             return UserPrivateProfileSerializer
0186: 
0187:         # РћР±С‹С‡РЅС‹Р№ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ РІРёРґРёС‚ С‚РѕР»СЊРєРѕ РїСѓР±Р»РёС‡РЅС‹Рµ РґР°РЅРЅС‹Рµ С‡СѓР¶РѕРіРѕ РїСЂРѕС„РёР»СЏ
0188:         return UserPublicProfileSerializer
0189: 
0190:     def get_object(self):
0191:         user_id = self.kwargs.get("pk")
0192:         if user_id:
0193:             return generics.get_object_or_404(User, pk=user_id)
0194:         return self.request.user
0195: 
0196: 
0197: class UserListAPIView(generics.ListAPIView):
0198:     """
0199:     Р­РЅРґРїРѕРёРЅС‚ РґР»СЏ РїСЂРѕСЃРјРѕС‚СЂР° СЃРїРёСЃРєР° РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№
0200:     РўРѕР»СЊРєРѕ РґР»СЏ РјРµРЅРµРґР¶РµСЂРѕРІ Рё Р°РґРјРёРЅРѕРІ
0201:     """
0202: 
0203:     serializer_class = UserPrivateProfileSerializer
0204:     permission_classes = [permissions.IsAuthenticated, CanViewUserList]
0205: 
0206:     def get_queryset(self):
0207:         # РџСЂРѕРІРµСЂСЏРµРј РїСЂР°РІР°
0208:         if not (self.request.user.role == "manager" or self.request.user.is_staff):
0209:             raise DRFPermissionDenied("РўРѕР»СЊРєРѕ РјРµРЅРµРґР¶РµСЂС‹ Рё Р°РґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂС‹ РјРѕРіСѓС‚ РїСЂРѕСЃРјР°С‚СЂРёРІР°С‚СЊ СЃРїРёСЃРѕРє РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№")
0210: 
0211:         return User.objects.all().order_by("-date_joined")

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\user\__init__.py
================================================================================

================================================================================
ФАЙЛ: D:\python\django\cw_habit_tracker\manage.py
================================================================================
0001: #!/usr/bin/env python
0002: """Django's command-line utility for administrative tasks."""
0003: import os
0004: import sys
0005: 
0006: 
0007: def main():
0008:     """Run administrative tasks."""
0009:     os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
0010:     try:
0011:         from django.core.management import execute_from_command_line
0012:     except ImportError as exc:
0013:         raise ImportError(
0014:             "Couldn't import Django. Are you sure it's installed and "
0015:             "available on your PYTHONPATH environment variable? Did you "
0016:             "forget to activate a virtual environment?"
0017:         ) from exc
0018:     execute_from_command_line(sys.argv)
0019: 
0020: 
0021: if __name__ == "__main__":
0022:     main()


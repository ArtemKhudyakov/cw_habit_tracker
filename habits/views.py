import json

from django.contrib import messages
from django.contrib.auth.mixins import LoginRequiredMixin
from django.http import Http404, JsonResponse
from django.shortcuts import redirect
from django.views import View
from django.views.generic import DetailView, ListView, TemplateView
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework import generics, permissions
from rest_framework.filters import OrderingFilter

from .models import Habit
from .permissions import IsOwner
from .serializers import HabitSerializer, PublicHabitSerializer
from .tasks import send_test_notification


# API Views
class HabitListCreateView(generics.ListCreateAPIView):
    """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫"""

    serializer_class = HabitSerializer
    permission_classes = [permissions.IsAuthenticated, IsOwner]
    filter_backends = [DjangoFilterBackend, OrderingFilter]
    filterset_fields = ["is_pleasant", "is_public"]
    ordering_fields = ["time", "created_at"]

    def get_queryset(self):
        return Habit.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)


class HabitRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    """API –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""

    serializer_class = HabitSerializer
    permission_classes = [permissions.IsAuthenticated, IsOwner]

    def get_queryset(self):
        return Habit.objects.filter(user=self.request.user)


class PublicHabitListView(generics.ListAPIView):
    """API –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫"""

    serializer_class = PublicHabitSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return Habit.objects.filter(is_public=True).exclude(user=self.request.user)


# HTML Views
class HabitListView(LoginRequiredMixin, ListView):
    """HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    model = Habit
    template_name = "habits/habit_list.html"
    context_object_name = "habits"
    paginate_by = 5

    def get_queryset(self):
        queryset = Habit.objects.filter(user=self.request.user).order_by("-created_at")

        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        habit_type = self.request.GET.get("type")
        if habit_type == "useful":
            return queryset.filter(is_pleasant=False)
        elif habit_type == "pleasant":
            return queryset.filter(is_pleasant=True)

        return queryset


class PublicHabitsHTMLView(LoginRequiredMixin, ListView):
    """HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏"""

    model = Habit
    template_name = "habits/public_habits.html"
    context_object_name = "habits"

    def get_queryset(self):
        queryset = Habit.objects.filter(is_public=True).exclude(user=self.request.user)

        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        habit_type = self.request.GET.get("type")
        if habit_type == "useful":
            return queryset.filter(is_pleasant=False)
        elif habit_type == "pleasant":
            return queryset.filter(is_pleasant=True)

        return queryset


class HabitDetailView(LoginRequiredMixin, DetailView):
    """HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–≤—ã—á–∫–∏"""

    model = Habit
    template_name = "habits/habit_detail.html"
    context_object_name = "habit"

    def get_queryset(self):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –ò–õ–ò –ø—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user_habits = Habit.objects.filter(user=self.request.user)
        public_habits = Habit.objects.filter(is_public=True).exclude(user=self.request.user)
        return user_habits | public_habits

    def get_object(self, queryset=None):
        """–ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        if queryset is None:
            queryset = self.get_queryset()

        pk = self.kwargs.get("pk")
        try:
            return queryset.get(pk=pk)
        except Habit.DoesNotExist:
            raise Http404("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–π")


# HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class NotificationsView(LoginRequiredMixin, TemplateView):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""

    template_name = "habits/notifications.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["habits"] = self.request.user.habits.all()
        return context


class SendTestNotificationView(LoginRequiredMixin, View):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ñ–æ—Ä–º)"""

    def post(self, request):
        from .tasks import send_test_notification

        if not request.user.telegram_chat_id:
            messages.error(request, "‚ùå Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω")
            return redirect("habits:notifications")

        try:
            result = send_test_notification.delay()
            messages.success(request, f"‚úÖ {result.result}")
        except Exception as e:
            messages.error(request, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        return redirect("habits:notifications")


class TestHabitReminderView(LoginRequiredMixin, View):
    def post(self, request):
        from .tasks import send_habit_reminder_task

        if not request.user.telegram_chat_id:
            messages.error(request, "‚ùå Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω")
            return redirect("habits:notifications")

        user_habits = request.user.habits.all()
        if not user_habits.exists():
            messages.error(request, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return redirect("habits:notifications")

        try:
            habit = user_habits.first()
            result = send_habit_reminder_task.delay(habit.id)
            messages.success(request, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è: {habit.action}")
        except Exception as e:
            messages.error(request, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        return redirect("habits:notifications")


class ToggleNotificationsView(LoginRequiredMixin, View):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def post(self, request):
        user = request.user
        user.telegram_notifications = not user.telegram_notifications
        user.save()

        status = "–≤–∫–ª—é—á–µ–Ω—ã" if user.telegram_notifications else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        messages.success(request, f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")

        return redirect("habits:notifications")

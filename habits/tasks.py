import logging

import requests
from celery import shared_task
from django.conf import settings
from django.contrib.auth import get_user_model

logger = logging.getLogger(__name__)
User = get_user_model()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger.setLevel(logging.INFO)


def send_habit_reminder(chat_id, message):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger.info("=== –ù–ê–ß–ê–õ–û –û–¢–ü–†–ê–í–ö–ò TELEGRAM –°–û–û–ë–©–ï–ù–ò–Ø ===")
    logger.info(f"Chat ID: {chat_id}")
    logger.info(f"Message: {message}")

    if not settings.TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False

    logger.info("‚úÖ TELEGRAM_BOT_TOKEN –Ω–∞–π–¥–µ–Ω")

    url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": message, "parse_mode": "HTML"}

    logger.info(f"URL: {url}")
    logger.info(f"Payload: {payload}")

    try:
        logger.info("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API...")
        response = requests.post(url, json=payload, timeout=10)
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. Status code: {response.status_code}")
        logger.info(f"üì® Response text: {response.text}")

        if response.status_code == 200:
            logger.info("üéâ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status_code}")
            logger.error(f"üìù –î–µ—Ç–∞–ª–∏: {response.text}")
            return False
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False


@shared_task
def send_habit_reminder_task(habit_id):
    """Celery –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–µ"""

    from .models import Habit

    # User = get_user_model()

    try:
        habit = Habit.objects.get(id=habit_id)
        user = habit.user

        if not user.telegram_chat_id or not user.telegram_notifications:
            return "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω Telegram"

        message = (
            f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ!</b>\n\n"
            f"–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å: <b>{habit.action}</b>\n"
            f"üïê –í—Ä–µ–º—è: {habit.time.strftime('%H:%M')}\n"
            f"üìç –ú–µ—Å—Ç–æ: {habit.place}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {habit.duration} —Å–µ–∫—É–Ω–¥"
        )

        success = send_habit_reminder(user.telegram_chat_id, message)

        if success:
            return f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è: {habit.action}"
        else:
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"

    except Habit.DoesNotExist:
        return "‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


@shared_task
def debug_task():
    """–°–∞–º–∞—è –ø—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("=== –í–´–ü–û–õ–ù–ï–ù–ò–ï DEBUG TASK ===")
    return "üéâ Debug task executed!"


@shared_task
def send_test_notification():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger.info("=== –ù–ê–ß–ê–õ–û –û–¢–ü–†–ê–í–ö–ò –¢–ï–°–¢–û–í–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===")

    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram
    user = User.objects.filter(telegram_chat_id__isnull=False).first()

    if not user:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_chat_id")
        return "‚ùå No users with Telegram"

    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
    logger.info(f"üì± Chat ID: {user.telegram_chat_id}")
    logger.info(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: {user.telegram_notifications}")

    if not user.telegram_notifications:
        logger.warning("‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    message = (
        "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!</b>\n\n"
        "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
        "‚úÖ –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n"
        "üí™ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö!"
    )

    logger.info("üîÑ –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    success = send_habit_reminder(user.telegram_chat_id, message)

    if success:
        logger.info("üéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
    else:
        logger.error("‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"


@shared_task
def check_and_send_habit_reminders():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö"""
    import logging
    import pytz
    from django.utils import timezone

    from .models import Habit

    logger = logging.getLogger(__name__)
    # User = get_user_model()

    logger.info("=== üîç –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –û –ü–†–ò–í–´–ß–ö–ê–• ===")

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
    moscow_tz = pytz.timezone("Europe/Moscow")
    now_moscow = timezone.now().astimezone(moscow_tz)
    current_time_moscow = now_moscow.time()

    logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–æ—Å–∫–≤–∞: {current_time_moscow}")

    # –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram
    habits_to_check = Habit.objects.filter(
        user__telegram_chat_id__isnull=False,
        user__telegram_notifications=True,
    )

    logger.info(f"–ü—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {habits_to_check.count()}")

    results = []

    for habit in habits_to_check:
        try:
            # –í—Ä–µ–º—è –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –±–∞–∑–µ - —ç—Ç–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (–ø—Ä–æ—Å—Ç–æ TimeField)
            habit_time_moscow = habit.time

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è
            time_diff = abs(
                (current_time_moscow.hour * 60 + current_time_moscow.minute)
                - (habit_time_moscow.hour * 60 + habit_time_moscow.minute)
            )

            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {habit.action} –≤ {habit_time_moscow}")
            logger.info(f"–†–∞–∑–Ω–∏—Ü–∞ —Å —Ç–µ–∫—É—â–∏–º {current_time_moscow}: {time_diff} –º–∏–Ω")

            if time_diff <= 2:  # ¬±2 –º–∏–Ω—É—Ç—ã
                message = (
                    f"‚è∞ <b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É!</b>\n\n"
                    f"<b>{habit.action}</b>\n"
                    f"üïê –í—Ä–µ–º—è: {habit_time_moscow.strftime('%H:%M')}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {habit.place}\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {habit.duration} —Å–µ–∫—É–Ω–¥\n"
                )

                if habit.reward:
                    message += f"üéÅ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {habit.reward}\n"
                elif habit.related_habit:
                    message += f"üîó –°–≤—è–∑–∞–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞: {habit.related_habit.action}\n"

                message += "\nüí™ –£–¥–∞—á–∏ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏!"

                success = send_habit_reminder(habit.user.telegram_chat_id, message)

                if success:
                    results.append(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {habit.action}")
                    logger.info("‚úÖ –£–°–ü–ï–•: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                else:
                    results.append(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {habit.action}")

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            results.append(error_msg)
            logger.error(error_msg)

    return "\n".join(results) if results else "‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

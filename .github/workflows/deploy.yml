name: Django CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  DEBUG: ${{ secrets.DEBUG }}
  DB_POSTGRES_NAME: ${{ secrets.DB_POSTGRES_NAME }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  DB_POSTGRES_PASSWORD: ${{ secrets.DB_POSTGRES_PASSWORD }}
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
  ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
  ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ secrets.DB_POSTGRES_NAME }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        pip install poetry
        poetry config virtualenvs.create false
        poetry install --no-interaction --no-ansi --no-root

    - name: Run migrations
      run: python manage.py migrate

    - name: Run tests with coverage
      run: |
        python manage.py collectstatic --noinput
        coverage run --source='.' manage.py test
        coverage report
        coverage html

    - name: Run flake8
      run: flake8 .

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4  # ✅ ОБНОВЛЕНО!
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Создаем папку если не существует
          mkdir -p ~/apps/cw_habit_tracker
          cd ~/apps/cw_habit_tracker
          
          # Клонируем/обновляем репозиторий
          if [ ! -d ".git" ]; then
            git clone https://github.com/${{ github.repository }} .
          else
            git fetch origin
            git reset --hard origin/main
          fi
          
          # Создаем .env.docker файл
          cat > .env.docker << EOF
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DEBUG=${{ secrets.DEBUG }}
          DB_POSTGRES_NAME=${{ secrets.DB_POSTGRES_NAME }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          DB_POSTGRES_PASSWORD=${{ secrets.DB_POSTGRES_PASSWORD }}
          HOST=localhost
          PORT=5432
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          EOF
          
          # Останавливаем старые контейнеры
          docker-compose down || true
          
          # Собираем и запускаем
          docker-compose up -d --build
          
          # Ждем запуска БД
          sleep 10
          
          # Выполняем миграции и настройку
          docker-compose exec -T web python manage.py migrate
          docker-compose exec -T web python manage.py collectstatic --noinput
          docker-compose exec -T web python manage.py create_superuser || echo "Superuser exists"
          docker-compose exec -T web python manage.py load_public_habits || echo "Public habits already loaded"
          
          echo "🚀 Deployment completed successfully!"